#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rainbow.Framework.Data.MsSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Rainbow")]
	internal partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void DeleteUser(User instance);
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void InsertModuleDefinition(ModuleDefinition instance);
    partial void UpdateModuleDefinition(ModuleDefinition instance);
    partial void DeleteModuleDefinition(ModuleDefinition instance);
    partial void UpdateGeneralModuleDefinition(GeneralModuleDefinition instance);
    partial void DeleteGeneralModuleDefinition(GeneralModuleDefinition instance);
    partial void InsertPortal(Portal instance);
    partial void UpdatePortal(Portal instance);
    partial void DeletePortal(Portal instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertSettingGroup(SettingGroup instance);
    partial void UpdateSettingGroup(SettingGroup instance);
    partial void DeleteSettingGroup(SettingGroup instance);
    partial void InsertBaseSettingType(BaseSettingType instance);
    partial void UpdateBaseSettingType(BaseSettingType instance);
    partial void DeleteBaseSettingType(BaseSettingType instance);
    partial void InsertBaseSetting(BaseSetting instance);
    partial void UpdateBaseSetting(BaseSetting instance);
    partial void DeleteBaseSetting(BaseSetting instance);
    partial void InsertPortalSetting(PortalSetting instance);
    partial void UpdatePortalSetting(PortalSetting instance);
    partial void DeletePortalSetting(PortalSetting instance);
    partial void InsertModuleSetting(ModuleSetting instance);
    partial void UpdateModuleSetting(ModuleSetting instance);
    partial void DeleteModuleSetting(ModuleSetting instance);
    partial void InsertPageSetting(PageSetting instance);
    partial void UpdatePageSetting(PageSetting instance);
    partial void DeletePageSetting(PageSetting instance);
    partial void InsertModuleUserSetting(ModuleUserSetting instance);
    partial void UpdateModuleUserSetting(ModuleUserSetting instance);
    partial void DeleteModuleUserSetting(ModuleUserSetting instance);
    partial void InsertSolution(Solution instance);
    partial void UpdateSolution(Solution instance);
    partial void DeleteSolution(Solution instance);
    partial void InsertSolutionModuleDefinition(SolutionModuleDefinition instance);
    partial void UpdateSolutionModuleDefinition(SolutionModuleDefinition instance);
    partial void DeleteSolutionModuleDefinition(SolutionModuleDefinition instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Rainbow.Framework.Data.MsSql.Properties.Settings.Default.RainbowConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<Version> Versions
		{
			get
			{
				return this.GetTable<Version>();
			}
		}
		
		public System.Data.Linq.Table<ModuleDefinition> ModuleDefinitions
		{
			get
			{
				return this.GetTable<ModuleDefinition>();
			}
		}
		
		public System.Data.Linq.Table<GeneralModuleDefinition> GeneralModuleDefinitions
		{
			get
			{
				return this.GetTable<GeneralModuleDefinition>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<Portal> Portals
		{
			get
			{
				return this.GetTable<Portal>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<SettingGroup> SettingGroups
		{
			get
			{
				return this.GetTable<SettingGroup>();
			}
		}
		
		public System.Data.Linq.Table<BaseSettingType> BaseSettingTypes
		{
			get
			{
				return this.GetTable<BaseSettingType>();
			}
		}
		
		public System.Data.Linq.Table<BaseSetting> BaseSettings
		{
			get
			{
				return this.GetTable<BaseSetting>();
			}
		}
		
		public System.Data.Linq.Table<Monitoring> Monitorings
		{
			get
			{
				return this.GetTable<Monitoring>();
			}
		}
		
		public System.Data.Linq.Table<Recycler> Recyclers
		{
			get
			{
				return this.GetTable<Recycler>();
			}
		}
		
		public System.Data.Linq.Table<PortalSetting> PortalSettings
		{
			get
			{
				return this.GetTable<PortalSetting>();
			}
		}
		
		public System.Data.Linq.Table<ModuleSetting> ModuleSettings
		{
			get
			{
				return this.GetTable<ModuleSetting>();
			}
		}
		
		public System.Data.Linq.Table<PageSetting> PageSettings
		{
			get
			{
				return this.GetTable<PageSetting>();
			}
		}
		
		public System.Data.Linq.Table<ModuleUserSetting> ModuleUserSettings
		{
			get
			{
				return this.GetTable<ModuleUserSetting>();
			}
		}
		
		public System.Data.Linq.Table<Solution> Solutions
		{
			get
			{
				return this.GetTable<Solution>();
			}
		}
		
		public System.Data.Linq.Table<SolutionModuleDefinition> SolutionModuleDefinitions
		{
			get
			{
				return this.GetTable<SolutionModuleDefinition>();
			}
		}
		
		private void InsertUser(User obj)
		{
			System.Nullable<System.Guid> p1 = obj.UserId;
			this.aspnet_Membership_CreateUser(default(string), obj.UserName, default(string), default(string), obj.Email, obj.PasswordQuestion, default(string), ((System.Nullable<bool>)(obj.IsApproved)), default(System.Nullable<System.DateTime>), ((System.Nullable<System.DateTime>)(obj.CreationDate)), default(System.Nullable<int>), default(System.Nullable<int>), ref p1);
			obj.UserId = p1.GetValueOrDefault();
		}
		
		private void UpdateUser(User obj)
		{
			this.aspnet_Membership_UpdateUser(default(string), obj.UserName, obj.Email, obj.Comment, ((System.Nullable<bool>)(obj.IsApproved)), ((System.Nullable<System.DateTime>)(obj.LastLoginDate)), ((System.Nullable<System.DateTime>)(obj.LastActivityDate)), default(System.Nullable<int>), default(System.Nullable<System.DateTime>));
		}
		
		private void InsertGeneralModuleDefinition(GeneralModuleDefinition obj)
		{
			this.rb_AddGeneralModuleDefinitions(((System.Nullable<System.Guid>)(obj.GeneralModDefId)), obj.FriendlyName, obj.DesktopSource, obj.MobileSource, obj.AssemblyName, obj.ClassName, ((System.Nullable<bool>)(obj.IsAdmin)), ((System.Nullable<bool>)(obj.IsSearchable)));
		}
		
		private void InsertModule(Module obj)
		{
			System.Nullable<int> p1 = obj.ModuleId;
			this.rb_AddModule(((System.Nullable<int>)(obj.PageId)), ((System.Nullable<int>)(obj.Order)), obj.Title, obj.PaneName, ((System.Nullable<int>)(obj.ModuleDefId)), ((System.Nullable<int>)(obj.CacheTime)), obj.AuthorizedRolesEdit, obj.AuthorizedRolesAdd, obj.AuthorizedRolesView, obj.AuthorizedRolesDelete, obj.AuthorizedRolesProperties, obj.AuthorizedRolesModuleMove, obj.AuthorizedRolesModuleDelete, ((System.Nullable<bool>)(obj.IsShowMobile)), obj.AuthorizedRolesPublishing, ((System.Nullable<bool>)(obj.IsSupportWorkflow)), ((System.Nullable<bool>)(obj.IsShowEveryWhere)), ((System.Nullable<bool>)(obj.IsCollapsable)), ref p1);
			obj.ModuleId = p1.GetValueOrDefault();
		}
		
		private void UpdateModule(Module obj)
		{
			this.rb_UpdateModule(((System.Nullable<int>)(obj.ModuleId)), ((System.Nullable<int>)(obj.PageId)), ((System.Nullable<int>)(obj.Order)), obj.Title, obj.PaneName, ((System.Nullable<int>)(obj.CacheTime)), obj.AuthorizedRolesEdit, obj.AuthorizedRolesAdd, obj.AuthorizedRolesView, obj.AuthorizedRolesDelete, obj.AuthorizedRolesProperties, ((System.Nullable<bool>)(obj.IsShowMobile)), obj.AuthorizedRolesPublishing, obj.AuthorizedRolesModuleMove, obj.AuthorizedRolesModuleDelete, ((System.Nullable<bool>)(obj.IsSupportWorkflow)), obj.AuthorizedRolesApprove, ((System.Nullable<bool>)(obj.IsShowEveryWhere)), ((System.Nullable<bool>)(obj.IsCollapsable)));
		}
		
		private void DeleteModule(Module obj)
		{
			this.rb_DeleteModule(((System.Nullable<int>)(obj.ModuleId)));
		}
		
		[Function(Name="dbo.aspnet_Membership_ChangePasswordQuestionAndAnswer")]
		public int aspnet_Membership_ChangePasswordQuestionAndAnswer([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="NewPasswordQuestion", DbType="NVarChar(256)")] string newPasswordQuestion, [Parameter(Name="NewPasswordAnswer", DbType="NVarChar(128)")] string newPasswordAnswer)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, newPasswordQuestion, newPasswordAnswer);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_UpdateUserInfo")]
		public int aspnet_Membership_UpdateUserInfo([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="IsPasswordCorrect", DbType="Bit")] System.Nullable<bool> isPasswordCorrect, [Parameter(Name="UpdateLastLoginActivityDate", DbType="Bit")] System.Nullable<bool> updateLastLoginActivityDate, [Parameter(Name="MaxInvalidPasswordAttempts", DbType="Int")] System.Nullable<int> maxInvalidPasswordAttempts, [Parameter(Name="PasswordAttemptWindow", DbType="Int")] System.Nullable<int> passwordAttemptWindow, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="LastLoginDate", DbType="DateTime")] System.Nullable<System.DateTime> lastLoginDate, [Parameter(Name="LastActivityDate", DbType="DateTime")] System.Nullable<System.DateTime> lastActivityDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, isPasswordCorrect, updateLastLoginActivityDate, maxInvalidPasswordAttempts, passwordAttemptWindow, currentTimeUtc, lastLoginDate, lastActivityDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_CreateUser")]
		public int aspnet_Membership_CreateUser([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="Password", DbType="NVarChar(128)")] string password, [Parameter(Name="PasswordSalt", DbType="NVarChar(128)")] string passwordSalt, [Parameter(Name="Email", DbType="NVarChar(256)")] string email, [Parameter(Name="PasswordQuestion", DbType="NVarChar(256)")] string passwordQuestion, [Parameter(Name="PasswordAnswer", DbType="NVarChar(128)")] string passwordAnswer, [Parameter(Name="IsApproved", DbType="Bit")] System.Nullable<bool> isApproved, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="CreateDate", DbType="DateTime")] System.Nullable<System.DateTime> createDate, [Parameter(Name="UniqueEmail", DbType="Int")] System.Nullable<int> uniqueEmail, [Parameter(Name="PasswordFormat", DbType="Int")] System.Nullable<int> passwordFormat, [Parameter(Name="UserId", DbType="UniqueIdentifier")] ref System.Nullable<System.Guid> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, password, passwordSalt, email, passwordQuestion, passwordAnswer, isApproved, currentTimeUtc, createDate, uniqueEmail, passwordFormat, userId);
			userId = ((System.Nullable<System.Guid>)(result.GetParameterValue(12)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_GetNumberOfUsersOnline")]
		public int aspnet_Membership_GetNumberOfUsersOnline([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="MinutesSinceLastInActive", DbType="Int")] System.Nullable<int> minutesSinceLastInActive, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, minutesSinceLastInActive, currentTimeUtc);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_GetPassword")]
		public ISingleResult<aspnet_Membership_GetPasswordResult> aspnet_Membership_GetPassword([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="MaxInvalidPasswordAttempts", DbType="Int")] System.Nullable<int> maxInvalidPasswordAttempts, [Parameter(Name="PasswordAttemptWindow", DbType="Int")] System.Nullable<int> passwordAttemptWindow, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="PasswordAnswer", DbType="NVarChar(128)")] string passwordAnswer)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, maxInvalidPasswordAttempts, passwordAttemptWindow, currentTimeUtc, passwordAnswer);
			return ((ISingleResult<aspnet_Membership_GetPasswordResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_GetPasswordWithFormat")]
		public ISingleResult<aspnet_Membership_GetPasswordWithFormatResult> aspnet_Membership_GetPasswordWithFormat([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="UpdateLastLoginActivityDate", DbType="Bit")] System.Nullable<bool> updateLastLoginActivityDate, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, updateLastLoginActivityDate, currentTimeUtc);
			return ((ISingleResult<aspnet_Membership_GetPasswordWithFormatResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_GetUserByEmail")]
		public ISingleResult<aspnet_Membership_GetUserByEmailResult> aspnet_Membership_GetUserByEmail([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="Email", DbType="NVarChar(256)")] string email)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, email);
			return ((ISingleResult<aspnet_Membership_GetUserByEmailResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_GetUserByName")]
		public ISingleResult<User> aspnet_Membership_GetUserByName([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="UpdateLastActivity", DbType="Bit")] System.Nullable<bool> updateLastActivity)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, currentTimeUtc, updateLastActivity);
			return ((ISingleResult<User>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_GetUserByUserId")]
		public ISingleResult<User> aspnet_Membership_GetUserByUserId([Parameter(Name="UserId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="UpdateLastActivity", DbType="Bit")] System.Nullable<bool> updateLastActivity)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, currentTimeUtc, updateLastActivity);
			return ((ISingleResult<User>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_ResetPassword")]
		public int aspnet_Membership_ResetPassword([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="NewPassword", DbType="NVarChar(128)")] string newPassword, [Parameter(Name="MaxInvalidPasswordAttempts", DbType="Int")] System.Nullable<int> maxInvalidPasswordAttempts, [Parameter(Name="PasswordAttemptWindow", DbType="Int")] System.Nullable<int> passwordAttemptWindow, [Parameter(Name="PasswordSalt", DbType="NVarChar(128)")] string passwordSalt, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="PasswordFormat", DbType="Int")] System.Nullable<int> passwordFormat, [Parameter(Name="PasswordAnswer", DbType="NVarChar(128)")] string passwordAnswer)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, newPassword, maxInvalidPasswordAttempts, passwordAttemptWindow, passwordSalt, currentTimeUtc, passwordFormat, passwordAnswer);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_SetPassword")]
		public int aspnet_Membership_SetPassword([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="NewPassword", DbType="NVarChar(128)")] string newPassword, [Parameter(Name="PasswordSalt", DbType="NVarChar(128)")] string passwordSalt, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc, [Parameter(Name="PasswordFormat", DbType="Int")] System.Nullable<int> passwordFormat)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, newPassword, passwordSalt, currentTimeUtc, passwordFormat);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_UnlockUser")]
		public int aspnet_Membership_UnlockUser([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Membership_UpdateUser")]
		public int aspnet_Membership_UpdateUser([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="Email", DbType="NVarChar(256)")] string email, [Parameter(Name="Comment", DbType="NText")] string comment, [Parameter(Name="IsApproved", DbType="Bit")] System.Nullable<bool> isApproved, [Parameter(Name="LastLoginDate", DbType="DateTime")] System.Nullable<System.DateTime> lastLoginDate, [Parameter(Name="LastActivityDate", DbType="DateTime")] System.Nullable<System.DateTime> lastActivityDate, [Parameter(Name="UniqueEmail", DbType="Int")] System.Nullable<int> uniqueEmail, [Parameter(Name="CurrentTimeUtc", DbType="DateTime")] System.Nullable<System.DateTime> currentTimeUtc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, email, comment, isApproved, lastLoginDate, lastActivityDate, uniqueEmail, currentTimeUtc);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.aspnet_Users_DeleteUser")]
		public int aspnet_Users_DeleteUser([Parameter(Name="ApplicationName", DbType="NVarChar(256)")] string applicationName, [Parameter(Name="UserName", DbType="NVarChar(256)")] string userName, [Parameter(Name="TablesToDeleteFrom", DbType="Int")] System.Nullable<int> tablesToDeleteFrom, [Parameter(Name="NumTablesDeletedFrom", DbType="Int")] ref System.Nullable<int> numTablesDeletedFrom)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationName, userName, tablesToDeleteFrom, numTablesDeletedFrom);
			numTablesDeletedFrom = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_AddModule")]
		public int rb_AddModule(
					[Parameter(Name="TabID", DbType="Int")] System.Nullable<int> tabID, 
					[Parameter(Name="ModuleOrder", DbType="Int")] System.Nullable<int> moduleOrder, 
					[Parameter(Name="ModuleTitle", DbType="NVarChar(256)")] string moduleTitle, 
					[Parameter(Name="PaneName", DbType="NVarChar(50)")] string paneName, 
					[Parameter(Name="ModuleDefID", DbType="Int")] System.Nullable<int> moduleDefID, 
					[Parameter(Name="CacheTime", DbType="Int")] System.Nullable<int> cacheTime, 
					[Parameter(Name="EditRoles", DbType="NVarChar(256)")] string editRoles, 
					[Parameter(Name="AddRoles", DbType="NVarChar(256)")] string addRoles, 
					[Parameter(Name="ViewRoles", DbType="NVarChar(256)")] string viewRoles, 
					[Parameter(Name="DeleteRoles", DbType="NVarChar(256)")] string deleteRoles, 
					[Parameter(Name="PropertiesRoles", DbType="NVarChar(256)")] string propertiesRoles, 
					[Parameter(Name="MoveModuleRoles", DbType="NVarChar(256)")] string moveModuleRoles, 
					[Parameter(Name="DeleteModuleRoles", DbType="NVarChar(256)")] string deleteModuleRoles, 
					[Parameter(Name="ShowMobile", DbType="Bit")] System.Nullable<bool> showMobile, 
					[Parameter(Name="PublishingRoles", DbType="NVarChar(256)")] string publishingRoles, 
					[Parameter(Name="SupportWorkflow", DbType="Bit")] System.Nullable<bool> supportWorkflow, 
					[Parameter(Name="ShowEveryWhere", DbType="Bit")] System.Nullable<bool> showEveryWhere, 
					[Parameter(Name="SupportCollapsable", DbType="Bit")] System.Nullable<bool> supportCollapsable, 
					[Parameter(Name="ModuleID", DbType="Int")] ref System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tabID, moduleOrder, moduleTitle, paneName, moduleDefID, cacheTime, editRoles, addRoles, viewRoles, deleteRoles, propertiesRoles, moveModuleRoles, deleteModuleRoles, showMobile, publishingRoles, supportWorkflow, showEveryWhere, supportCollapsable, moduleID);
			moduleID = ((System.Nullable<int>)(result.GetParameterValue(18)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_AddGeneralModuleDefinitions")]
		public int rb_AddGeneralModuleDefinitions([Parameter(Name="GeneralModDefID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> generalModDefID, [Parameter(Name="FriendlyName", DbType="NVarChar(128)")] string friendlyName, [Parameter(Name="DesktopSrc", DbType="NVarChar(256)")] string desktopSrc, [Parameter(Name="MobileSrc", DbType="NVarChar(256)")] string mobileSrc, [Parameter(Name="AssemblyName", DbType="VarChar(50)")] string assemblyName, [Parameter(Name="ClassName", DbType="NVarChar(128)")] string className, [Parameter(Name="Admin", DbType="Bit")] System.Nullable<bool> admin, [Parameter(Name="Searchable", DbType="Bit")] System.Nullable<bool> searchable)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), generalModDefID, friendlyName, desktopSrc, mobileSrc, assemblyName, className, admin, searchable);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_DeleteModule")]
		public int rb_DeleteModule([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_DeleteModuleToRecycler")]
		public int rb_DeleteModuleToRecycler([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID, [Parameter(Name="DeletedBy", DbType="NVarChar(250)")] string deletedBy, [Parameter(Name="DateDeleted", DbType="DateTime")] System.Nullable<System.DateTime> dateDeleted)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID, deletedBy, dateDeleted);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_UpdateModule")]
		public int rb_UpdateModule(
					[Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID, 
					[Parameter(Name="TabID", DbType="Int")] System.Nullable<int> tabID, 
					[Parameter(Name="ModuleOrder", DbType="Int")] System.Nullable<int> moduleOrder, 
					[Parameter(Name="ModuleTitle", DbType="NVarChar(256)")] string moduleTitle, 
					[Parameter(Name="PaneName", DbType="NVarChar(50)")] string paneName, 
					[Parameter(Name="CacheTime", DbType="Int")] System.Nullable<int> cacheTime, 
					[Parameter(Name="EditRoles", DbType="NVarChar(256)")] string editRoles, 
					[Parameter(Name="AddRoles", DbType="NVarChar(256)")] string addRoles, 
					[Parameter(Name="ViewRoles", DbType="NVarChar(256)")] string viewRoles, 
					[Parameter(Name="DeleteRoles", DbType="NVarChar(256)")] string deleteRoles, 
					[Parameter(Name="PropertiesRoles", DbType="NVarChar(256)")] string propertiesRoles, 
					[Parameter(Name="ShowMobile", DbType="Bit")] System.Nullable<bool> showMobile, 
					[Parameter(Name="PublishingRoles", DbType="NVarChar(256)")] string publishingRoles, 
					[Parameter(Name="MoveModuleRoles", DbType="NVarChar(256)")] string moveModuleRoles, 
					[Parameter(Name="DeleteModuleRoles", DbType="NVarChar(256)")] string deleteModuleRoles, 
					[Parameter(Name="SupportWorkflow", DbType="Bit")] System.Nullable<bool> supportWorkflow, 
					[Parameter(Name="ApprovalRoles", DbType="NVarChar(256)")] string approvalRoles, 
					[Parameter(Name="ShowEveryWhere", DbType="Bit")] System.Nullable<bool> showEveryWhere, 
					[Parameter(Name="SupportCollapsable", DbType="Bit")] System.Nullable<bool> supportCollapsable)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID, tabID, moduleOrder, moduleTitle, paneName, cacheTime, editRoles, addRoles, viewRoles, deleteRoles, propertiesRoles, showMobile, publishingRoles, moveModuleRoles, deleteModuleRoles, supportWorkflow, approvalRoles, showEveryWhere, supportCollapsable);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_UpdateModuleDefinitions")]
		public int rb_UpdateModuleDefinitions([Parameter(Name="GeneralModDefID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> generalModDefID, [Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID, [Parameter(DbType="Bit")] System.Nullable<bool> ischecked)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), generalModDefID, portalID, ischecked);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_UpdateGeneralModuleDefinitions")]
		public int rb_UpdateGeneralModuleDefinitions([Parameter(Name="GeneralModDefID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> generalModDefID, [Parameter(Name="FriendlyName", DbType="NVarChar(128)")] string friendlyName, [Parameter(Name="DesktopSrc", DbType="NVarChar(256)")] string desktopSrc, [Parameter(Name="MobileSrc", DbType="NVarChar(256)")] string mobileSrc, [Parameter(Name="AssemblyName", DbType="VarChar(50)")] string assemblyName, [Parameter(Name="ClassName", DbType="NVarChar(128)")] string className, [Parameter(Name="Admin", DbType="Bit")] System.Nullable<bool> admin, [Parameter(Name="Searchable", DbType="Bit")] System.Nullable<bool> searchable)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), generalModDefID, friendlyName, desktopSrc, mobileSrc, assemblyName, className, admin, searchable);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_DeleteModuleDefinition")]
		public int rb_DeleteModuleDefinition([Parameter(Name="ModuleDefID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> moduleDefID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleDefID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModulesInTab")]
		public ISingleResult<GetModulesInTabResult> rb_GetModulesInTab([Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID, [Parameter(Name="TabID", DbType="Int")] System.Nullable<int> tabID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), portalID, tabID);
			return ((ISingleResult<GetModulesInTabResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_FindModulesByGuid")]
		public ISingleResult<FindModulesByGuidResult> rb_FindModulesByGuid([Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID, [Parameter(Name="Guid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> guid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), portalID, guid);
			return ((ISingleResult<FindModulesByGuidResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetGeneralModuleDefinitionByName")]
		public int rb_GetGeneralModuleDefinitionByName([Parameter(Name="FriendlyName", DbType="NVarChar(128)")] string friendlyName, [Parameter(Name="ModuleID", DbType="UniqueIdentifier")] ref System.Nullable<System.Guid> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), friendlyName, moduleID);
			moduleID = ((System.Nullable<System.Guid>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModuleDefinitionByGuid")]
		public int rb_GetModuleDefinitionByGuid([Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID, [Parameter(Name="Guid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> guid, [Parameter(Name="ModuleID", DbType="Int")] ref System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), portalID, guid, moduleID);
			moduleID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModuleDefinitionByName")]
		public int rb_GetModuleDefinitionByName([Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID, [Parameter(Name="FriendlyName", DbType="NVarChar(128)")] string friendlyName, [Parameter(Name="ModuleID", DbType="Int")] ref System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), portalID, friendlyName, moduleID);
			moduleID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModuleDefinitionByID")]
		public ISingleResult<GetModuleDefinitionByIDResult> rb_GetModuleDefinitionByID([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((ISingleResult<GetModuleDefinitionByIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetGuid")]
		public ISingleResult<GetGuidResult> rb_GetGuid([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((ISingleResult<GetGuidResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModuleInUse")]
		public ISingleResult<GetModuleInUseResult> rb_GetModuleInUse([Parameter(Name="ModuleID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((ISingleResult<GetModuleInUseResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModulesAllPortals")]
		public int rb_GetModulesAllPortals()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetModulesByName")]
		public ISingleResult<GetModulesByNameResult> rb_GetModulesByName([Parameter(Name="ModuleName", DbType="VarChar(128)")] string moduleName, [Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleName, portalID);
			return ((ISingleResult<GetModulesByNameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetCurrentModuleDefinitions")]
		public ISingleResult<GeneralModuleDefinition> rb_GetCurrentModuleDefinitions([Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), portalID);
			return ((ISingleResult<GeneralModuleDefinition>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_MoveModuleToNewTab")]
		public int rb_MoveModuleToNewTab([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID, [Parameter(Name="TabID", DbType="Int")] System.Nullable<int> tabID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID, tabID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_Publish")]
		public int rb_Publish([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_RequestApproval")]
		public int rb_RequestApproval([Parameter(DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_Reject")]
		public int rb_Reject([Parameter(DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_Revert")]
		public int rb_Revert([Parameter(Name="ModuleID", DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_Approve")]
		public int rb_Approve([Parameter(DbType="Int")] System.Nullable<int> moduleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), moduleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rb_GetPageTree")]
		public int rb_GetPageTree([Parameter(Name="PortalID", DbType="Int")] System.Nullable<int> portalID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), portalID);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	[DataContract()]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership1;
		
		private EntitySet<User> _Users;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_Application> _aspnet_Application1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=1)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		[DataMember(Order=5)]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		[DataMember(Order=6)]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=7)]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership1", Storage="_aspnet_Membership1", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public aspnet_Membership aspnet_Membership1
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Membership1.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._aspnet_Membership1.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership1.Entity = null;
						previousValue.aspnet_User1 = null;
					}
					this._aspnet_Membership1.Entity = value;
					if ((value != null))
					{
						value.aspnet_User1 = this;
					}
					this.SendPropertyChanged("aspnet_Membership1");
				}
			}
		}
		
		[Association(Name="aspnet_User_User", Storage="_Users", ThisKey="UserId,UserName,LastActivityDate", OtherKey="UserId,UserName,LastActivityDate")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<User> Users
		{
			get
			{
				if ((this.serializing 
							&& (this._Users.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User1", Storage="_aspnet_Application1", ThisKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application1
		{
			get
			{
				return this._aspnet_Application1.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application1.Entity = null;
						previousValue.aspnet_Users1.Remove(this);
					}
					this._aspnet_Application1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users1.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void Initialize()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_Membership1 = default(EntityRef<aspnet_Membership>);
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_Application1 = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.aspnet_Membership")]
	[DataContract()]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntitySet<User> _Users;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_Application> _aspnet_Application1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=1)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
		[DataMember(Order=6)]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256)")]
		[DataMember(Order=7)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		[DataMember(Order=8)]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		[DataMember(Order=9)]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		[DataMember(Order=10)]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		[DataMember(Order=11)]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		[DataMember(Order=12)]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=13)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=14)]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=15)]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=16)]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		[DataMember(Order=17)]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		[DataMember(Order=18)]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		[DataMember(Order=19)]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		[DataMember(Order=20)]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=21)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Membership_User", Storage="_Users", ThisKey="Email,PasswordQuestion,Comment,IsApproved,CreateDate,LastLoginDate,LastPasswordCh" +
			"angedDate,UserId,IsLockedOut,LastLockoutDate", OtherKey="Email,PasswordQuestion,Comment,IsApproved,CreationDate,LastLoginDate,LastPassword" +
			"ChangedDate,UserId,IsLockedOut,LastLockedOutDate")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<User> Users
		{
			get
			{
				if ((this.serializing 
							&& (this._Users.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership1", Storage="_aspnet_User1", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.aspnet_Membership1 = null;
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership1 = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership1", Storage="_aspnet_Application1", ThisKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application1
		{
			get
			{
				return this._aspnet_Application1.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application1.Entity = null;
						previousValue.aspnet_Memberships1.Remove(this);
					}
					this._aspnet_Application1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships1.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Membership = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Membership = null;
		}
		
		private void Initialize()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_Application1 = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="")]
	[DataContract()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Email;
		
		private string _PasswordQuestion;
		
		private string _Comment;
		
		private bool _IsApproved;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastActivityDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.Guid _UserId;
		
		private bool _IsLockedOut;
		
		private System.DateTime _LastLockedOutDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnLastLockedOutDateChanging(System.DateTime value);
    partial void OnLastLockedOutDateChanged();
    #endregion
		
		public User()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UserName", CanBeNull=false)]
		[DataMember(Order=1)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email")]
		[DataMember(Order=2)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion")]
		[DataMember(Order=3)]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_Comment")]
		[DataMember(Order=4)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved")]
		[DataMember(Order=5)]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate")]
		[DataMember(Order=6)]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate")]
		[DataMember(Order=7)]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate")]
		[DataMember(Order=8)]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate")]
		[DataMember(Order=9)]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", IsPrimaryKey=true)]
		[DataMember(Order=10)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut")]
		[DataMember(Order=11)]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockedOutDate")]
		[DataMember(Order=12)]
		public System.DateTime LastLockedOutDate
		{
			get
			{
				return this._LastLockedOutDate;
			}
			set
			{
				if ((this._LastLockedOutDate != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastLockedOutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockedOutDate = value;
					this.SendPropertyChanged("LastLockedOutDate");
					this.OnLastLockedOutDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_User", Storage="_aspnet_User", ThisKey="UserId,UserName,LastActivityDate", OtherKey="UserId,UserName,LastActivityDate", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserId = value.UserId;
						this._UserName = value.UserName;
						this._LastActivityDate = value.LastActivityDate;
					}
					else
					{
						this._UserId = default(System.Guid);
						this._UserName = default(string);
						this._LastActivityDate = default(System.DateTime);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="aspnet_Membership_User", Storage="_aspnet_Membership", ThisKey="Email,PasswordQuestion,Comment,IsApproved,CreationDate,LastLoginDate,LastPassword" +
			"ChangedDate,UserId,IsLockedOut,LastLockedOutDate", OtherKey="Email,PasswordQuestion,Comment,IsApproved,CreateDate,LastLoginDate,LastPasswordCh" +
			"angedDate,UserId,IsLockedOut,LastLockoutDate", IsForeignKey=true)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Email = value.Email;
						this._PasswordQuestion = value.PasswordQuestion;
						this._Comment = value.Comment;
						this._IsApproved = value.IsApproved;
						this._CreationDate = value.CreateDate;
						this._LastLoginDate = value.LastLoginDate;
						this._LastPasswordChangedDate = value.LastPasswordChangedDate;
						this._UserId = value.UserId;
						this._IsLockedOut = value.IsLockedOut;
						this._LastLockedOutDate = value.LastLockoutDate;
					}
					else
					{
						this._Email = default(string);
						this._PasswordQuestion = default(string);
						this._Comment = default(string);
						this._IsApproved = default(bool);
						this._CreationDate = default(System.DateTime);
						this._LastLoginDate = default(System.DateTime);
						this._LastPasswordChangedDate = default(System.DateTime);
						this._UserId = default(System.Guid);
						this._IsLockedOut = default(bool);
						this._LastLockedOutDate = default(System.DateTime);
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.aspnet_Applications")]
	[DataContract()]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
		private EntitySet<aspnet_User> _aspnet_Users1;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=1)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(256)")]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", OtherKey="ApplicationId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Users.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User1", Storage="_aspnet_Users1", OtherKey="ApplicationId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<aspnet_User> aspnet_Users1
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Users1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Users1;
			}
			set
			{
				this._aspnet_Users1.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", OtherKey="ApplicationId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Memberships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership1", Storage="_aspnet_Memberships1", OtherKey="ApplicationId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<aspnet_Membership> aspnet_Memberships1
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Memberships1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Memberships1;
			}
			set
			{
				this._aspnet_Memberships1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Users1(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = this;
		}
		
		private void detach_aspnet_Users1(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = null;
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Memberships1(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = this;
		}
		
		private void detach_aspnet_Memberships1(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = null;
		}
		
		private void Initialize()
		{
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			this._aspnet_Users1 = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users1), new Action<aspnet_User>(this.detach_aspnet_Users1));
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._aspnet_Memberships1 = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships1), new Action<aspnet_Membership>(this.detach_aspnet_Memberships1));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_Versions")]
	[DataContract()]
	public partial class Version
	{
		
		private int _Release;
		
		private string _FullVersion;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		public Version()
		{
		}
		
		[Column(Storage="_Release", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int Release
		{
			get
			{
				return this._Release;
			}
			set
			{
				if ((this._Release != value))
				{
					this._Release = value;
				}
			}
		}
		
		[Column(Name="Version", Storage="_FullVersion", DbType="NVarChar(50)")]
		[DataMember(Order=2)]
		public string FullVersion
		{
			get
			{
				return this._FullVersion;
			}
			set
			{
				if ((this._FullVersion != value))
				{
					this._FullVersion = value;
				}
			}
		}
		
		[Column(Storage="_ReleaseDate", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this._ReleaseDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.rb_ModuleDefinitions")]
	[DataContract()]
	public partial class ModuleDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModuleDefID;
		
		private int _PortalID;
		
		private System.Guid _GeneralModDefID;
		
		private EntitySet<Module> _Modules;
		
		private EntityRef<GeneralModuleDefinition> _rb_GeneralModuleDefinition;
		
		private EntityRef<Portal> _Portal;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleDefIdChanging(int value);
    partial void OnModuleDefIdChanged();
    partial void OnPortalIdChanging(int value);
    partial void OnPortalIdChanged();
    partial void OnGeneralModDefIdChanging(System.Guid value);
    partial void OnGeneralModDefIdChanged();
    #endregion
		
		public ModuleDefinition()
		{
			this.Initialize();
		}
		
		[Column(Name="ModuleDefID", Storage="_ModuleDefID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ModuleDefId
		{
			get
			{
				return this._ModuleDefID;
			}
			set
			{
				if ((this._ModuleDefID != value))
				{
					this.OnModuleDefIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleDefID = value;
					this.SendPropertyChanged("ModuleDefId");
					this.OnModuleDefIdChanged();
				}
			}
		}
		
		[Column(Name="PortalID", Storage="_PortalID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int PortalId
		{
			get
			{
				return this._PortalID;
			}
			set
			{
				if ((this._PortalID != value))
				{
					this.OnPortalIdChanging(value);
					this.SendPropertyChanging();
					this._PortalID = value;
					this.SendPropertyChanged("PortalId");
					this.OnPortalIdChanged();
				}
			}
		}
		
		[Column(Name="GeneralModDefID", Storage="_GeneralModDefID", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=3)]
		public System.Guid GeneralModDefId
		{
			get
			{
				return this._GeneralModDefID;
			}
			set
			{
				if ((this._GeneralModDefID != value))
				{
					this.OnGeneralModDefIdChanging(value);
					this.SendPropertyChanging();
					this._GeneralModDefID = value;
					this.SendPropertyChanged("GeneralModDefId");
					this.OnGeneralModDefIdChanged();
				}
			}
		}
		
		[Association(Name="ModuleDefinition_Module", Storage="_Modules", ThisKey="ModuleDefId", OtherKey="ModuleDefId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Module> Modules
		{
			get
			{
				if ((this.serializing 
							&& (this._Modules.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Modules;
			}
			set
			{
				this._Modules.Assign(value);
			}
		}
		
		[Association(Name="GeneralModuleDefinition_ModuleDefinition", Storage="_rb_GeneralModuleDefinition", ThisKey="GeneralModDefId", OtherKey="GeneralModDefId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GeneralModuleDefinition GeneralModuleDefinition
		{
			get
			{
				return this._rb_GeneralModuleDefinition.Entity;
			}
			set
			{
				GeneralModuleDefinition previousValue = this._rb_GeneralModuleDefinition.Entity;
				if (((previousValue != value) 
							|| (this._rb_GeneralModuleDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rb_GeneralModuleDefinition.Entity = null;
						previousValue.ModuleDefinitions.Remove(this);
					}
					this._rb_GeneralModuleDefinition.Entity = value;
					if ((value != null))
					{
						value.ModuleDefinitions.Add(this);
						this._GeneralModDefID = value.GeneralModDefId;
					}
					else
					{
						this._GeneralModDefID = default(System.Guid);
					}
					this.SendPropertyChanged("GeneralModuleDefinition");
				}
			}
		}
		
		[Association(Name="Portal_ModuleDefinition", Storage="_Portal", ThisKey="PortalId", OtherKey="PortalId", IsForeignKey=true)]
		public Portal Portal
		{
			get
			{
				return this._Portal.Entity;
			}
			set
			{
				Portal previousValue = this._Portal.Entity;
				if (((previousValue != value) 
							|| (this._Portal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portal.Entity = null;
						previousValue.ModuleDefinitions.Remove(this);
					}
					this._Portal.Entity = value;
					if ((value != null))
					{
						value.ModuleDefinitions.Add(this);
						this._PortalID = value.PortalId;
					}
					else
					{
						this._PortalID = default(int);
					}
					this.SendPropertyChanged("Portal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.ModuleDefinition = this;
		}
		
		private void detach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.ModuleDefinition = null;
		}
		
		private void Initialize()
		{
			this._Modules = new EntitySet<Module>(new Action<Module>(this.attach_Modules), new Action<Module>(this.detach_Modules));
			this._rb_GeneralModuleDefinition = default(EntityRef<GeneralModuleDefinition>);
			this._Portal = default(EntityRef<Portal>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_GeneralModuleDefinitions")]
	[DataContract()]
	public partial class GeneralModuleDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GeneralModDefID;
		
		private string _FriendlyName;
		
		private string _DesktopSrc;
		
		private string _MobileSrc;
		
		private string _AssemblyName;
		
		private string _ClassName;
		
		private System.Nullable<bool> _Admin;
		
		private System.Nullable<bool> _Searchable;
		
		private EntitySet<ModuleDefinition> _ModuleDefinitions;
		
		private EntitySet<SolutionModuleDefinition> _SolutionModuleDefinitions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGeneralModDefIdChanging(System.Guid value);
    partial void OnGeneralModDefIdChanged();
    partial void OnFriendlyNameChanging(string value);
    partial void OnFriendlyNameChanged();
    partial void OnDesktopSourceChanging(string value);
    partial void OnDesktopSourceChanged();
    partial void OnMobileSourceChanging(string value);
    partial void OnMobileSourceChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnIsAdminChanging(System.Nullable<bool> value);
    partial void OnIsAdminChanged();
    partial void OnIsSearchableChanging(System.Nullable<bool> value);
    partial void OnIsSearchableChanged();
    #endregion
		
		public GeneralModuleDefinition()
		{
			this.Initialize();
		}
		
		[Column(Name="GeneralModDefID", Storage="_GeneralModDefID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public System.Guid GeneralModDefId
		{
			get
			{
				return this._GeneralModDefID;
			}
			set
			{
				if ((this._GeneralModDefID != value))
				{
					this.OnGeneralModDefIdChanging(value);
					this.SendPropertyChanging();
					this._GeneralModDefID = value;
					this.SendPropertyChanged("GeneralModDefId");
					this.OnGeneralModDefIdChanged();
				}
			}
		}
		
		[Column(Storage="_FriendlyName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string FriendlyName
		{
			get
			{
				return this._FriendlyName;
			}
			set
			{
				if ((this._FriendlyName != value))
				{
					this.OnFriendlyNameChanging(value);
					this.SendPropertyChanging();
					this._FriendlyName = value;
					this.SendPropertyChanged("FriendlyName");
					this.OnFriendlyNameChanged();
				}
			}
		}
		
		[Column(Name="DesktopSrc", Storage="_DesktopSrc", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string DesktopSource
		{
			get
			{
				return this._DesktopSrc;
			}
			set
			{
				if ((this._DesktopSrc != value))
				{
					this.OnDesktopSourceChanging(value);
					this.SendPropertyChanging();
					this._DesktopSrc = value;
					this.SendPropertyChanged("DesktopSource");
					this.OnDesktopSourceChanged();
				}
			}
		}
		
		[Column(Name="MobileSrc", Storage="_MobileSrc", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string MobileSource
		{
			get
			{
				return this._MobileSrc;
			}
			set
			{
				if ((this._MobileSrc != value))
				{
					this.OnMobileSourceChanging(value);
					this.SendPropertyChanging();
					this._MobileSrc = value;
					this.SendPropertyChanged("MobileSource");
					this.OnMobileSourceChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="NVarChar(128)")]
		[DataMember(Order=6)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[Column(Name="Admin", Storage="_Admin", DbType="Bit")]
		[DataMember(Order=7)]
		public System.Nullable<bool> IsAdmin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[Column(Name="Searchable", Storage="_Searchable", DbType="Bit")]
		[DataMember(Order=8)]
		public System.Nullable<bool> IsSearchable
		{
			get
			{
				return this._Searchable;
			}
			set
			{
				if ((this._Searchable != value))
				{
					this.OnIsSearchableChanging(value);
					this.SendPropertyChanging();
					this._Searchable = value;
					this.SendPropertyChanged("IsSearchable");
					this.OnIsSearchableChanged();
				}
			}
		}
		
		[Association(Name="GeneralModuleDefinition_ModuleDefinition", Storage="_ModuleDefinitions", ThisKey="GeneralModDefId", OtherKey="GeneralModDefId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<ModuleDefinition> ModuleDefinitions
		{
			get
			{
				if ((this.serializing 
							&& (this._ModuleDefinitions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ModuleDefinitions;
			}
			set
			{
				this._ModuleDefinitions.Assign(value);
			}
		}
		
		[Association(Name="GeneralModuleDefinition_SolutionModuleDefinition", Storage="_SolutionModuleDefinitions", ThisKey="GeneralModDefId", OtherKey="GeneralModDefID")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<SolutionModuleDefinition> SolutionModuleDefinitions
		{
			get
			{
				if ((this.serializing 
							&& (this._SolutionModuleDefinitions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SolutionModuleDefinitions;
			}
			set
			{
				this._SolutionModuleDefinitions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModuleDefinitions(ModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.GeneralModuleDefinition = this;
		}
		
		private void detach_ModuleDefinitions(ModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.GeneralModuleDefinition = null;
		}
		
		private void attach_SolutionModuleDefinitions(SolutionModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.GeneralModuleDefinition = this;
		}
		
		private void detach_SolutionModuleDefinitions(SolutionModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.GeneralModuleDefinition = null;
		}
		
		private void Initialize()
		{
			this._ModuleDefinitions = new EntitySet<ModuleDefinition>(new Action<ModuleDefinition>(this.attach_ModuleDefinitions), new Action<ModuleDefinition>(this.detach_ModuleDefinitions));
			this._SolutionModuleDefinitions = new EntitySet<SolutionModuleDefinition>(new Action<SolutionModuleDefinition>(this.attach_SolutionModuleDefinitions), new Action<SolutionModuleDefinition>(this.detach_SolutionModuleDefinitions));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_Modules")]
	[DataContract()]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModuleID;
		
		private int _TabID;
		
		private int _ModuleDefID;
		
		private int _ModuleOrder;
		
		private string _PaneName;
		
		private string _ModuleTitle;
		
		private string _AuthorizedEditRoles;
		
		private string _AuthorizedViewRoles;
		
		private string _AuthorizedAddRoles;
		
		private string _AuthorizedDeleteRoles;
		
		private string _AuthorizedPropertiesRoles;
		
		private int _CacheTime;
		
		private System.Nullable<bool> _ShowMobile;
		
		private string _AuthorizedPublishingRoles;
		
		private System.Nullable<bool> _NewVersion;
		
		private System.Nullable<bool> _SupportWorkflow;
		
		private string _AuthorizedApproveRoles;
		
		private System.Nullable<byte> _WorkflowState;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastEditor;
		
		private System.Nullable<System.DateTime> _StagingLastModified;
		
		private string _StagingLastEditor;
		
		private System.Nullable<bool> _SupportCollapsable;
		
		private System.Nullable<bool> _ShowEveryWhere;
		
		private string _AuthorizedMoveModuleRoles;
		
		private string _AuthorizedDeleteModuleRoles;
		
		private EntitySet<ModuleSetting> _ModuleSettings;
		
		private EntitySet<ModuleUserSetting> _ModuleUserSettings;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<ModuleDefinition> _ModuleDefinition;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnModuleDefIdChanging(int value);
    partial void OnModuleDefIdChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnPaneNameChanging(string value);
    partial void OnPaneNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAuthorizedRolesEditChanging(string value);
    partial void OnAuthorizedRolesEditChanged();
    partial void OnAuthorizedRolesViewChanging(string value);
    partial void OnAuthorizedRolesViewChanged();
    partial void OnAuthorizedRolesAddChanging(string value);
    partial void OnAuthorizedRolesAddChanged();
    partial void OnAuthorizedRolesDeleteChanging(string value);
    partial void OnAuthorizedRolesDeleteChanged();
    partial void OnAuthorizedRolesPropertiesChanging(string value);
    partial void OnAuthorizedRolesPropertiesChanged();
    partial void OnCacheTimeChanging(int value);
    partial void OnCacheTimeChanged();
    partial void OnIsShowMobileChanging(System.Nullable<bool> value);
    partial void OnIsShowMobileChanged();
    partial void OnAuthorizedRolesPublishingChanging(string value);
    partial void OnAuthorizedRolesPublishingChanged();
    partial void OnIsNewVersionChanging(System.Nullable<bool> value);
    partial void OnIsNewVersionChanged();
    partial void OnIsSupportWorkflowChanging(System.Nullable<bool> value);
    partial void OnIsSupportWorkflowChanged();
    partial void OnAuthorizedRolesApproveChanging(string value);
    partial void OnAuthorizedRolesApproveChanged();
    partial void OnWorkflowStateChanging(System.Nullable<byte> value);
    partial void OnWorkflowStateChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastEditorChanging(string value);
    partial void OnLastEditorChanged();
    partial void OnStagingLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnStagingLastModifiedChanged();
    partial void OnStagingLastEditorChanging(string value);
    partial void OnStagingLastEditorChanged();
    partial void OnIsCollapsableChanging(System.Nullable<bool> value);
    partial void OnIsCollapsableChanged();
    partial void OnIsShowEveryWhereChanging(System.Nullable<bool> value);
    partial void OnIsShowEveryWhereChanged();
    partial void OnAuthorizedRolesModuleMoveChanging(string value);
    partial void OnAuthorizedRolesModuleMoveChanged();
    partial void OnAuthorizedRolesModuleDeleteChanging(string value);
    partial void OnAuthorizedRolesModuleDeleteChanged();
    #endregion
		
		public Module()
		{
			this.Initialize();
		}
		
		[Column(Name="ModuleID", Storage="_ModuleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ModuleId
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[Column(Name="TabID", Storage="_TabID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int PageId
		{
			get
			{
				return this._TabID;
			}
			set
			{
				if ((this._TabID != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._TabID = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Name="ModuleDefID", Storage="_ModuleDefID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ModuleDefId
		{
			get
			{
				return this._ModuleDefID;
			}
			set
			{
				if ((this._ModuleDefID != value))
				{
					this.OnModuleDefIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleDefID = value;
					this.SendPropertyChanged("ModuleDefId");
					this.OnModuleDefIdChanged();
				}
			}
		}
		
		[Column(Name="ModuleOrder", Storage="_ModuleOrder", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int Order
		{
			get
			{
				return this._ModuleOrder;
			}
			set
			{
				if ((this._ModuleOrder != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._ModuleOrder = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_PaneName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string PaneName
		{
			get
			{
				return this._PaneName;
			}
			set
			{
				if ((this._PaneName != value))
				{
					this.OnPaneNameChanging(value);
					this.SendPropertyChanging();
					this._PaneName = value;
					this.SendPropertyChanged("PaneName");
					this.OnPaneNameChanged();
				}
			}
		}
		
		[Column(Name="ModuleTitle", Storage="_ModuleTitle", DbType="NVarChar(256)")]
		[DataMember(Order=6)]
		public string Title
		{
			get
			{
				return this._ModuleTitle;
			}
			set
			{
				if ((this._ModuleTitle != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._ModuleTitle = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedEditRoles", Storage="_AuthorizedEditRoles", DbType="NVarChar(256)")]
		[DataMember(Order=7)]
		public string AuthorizedRolesEdit
		{
			get
			{
				return this._AuthorizedEditRoles;
			}
			set
			{
				if ((this._AuthorizedEditRoles != value))
				{
					this.OnAuthorizedRolesEditChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedEditRoles = value;
					this.SendPropertyChanged("AuthorizedRolesEdit");
					this.OnAuthorizedRolesEditChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedViewRoles", Storage="_AuthorizedViewRoles", DbType="NVarChar(256)")]
		[DataMember(Order=8)]
		public string AuthorizedRolesView
		{
			get
			{
				return this._AuthorizedViewRoles;
			}
			set
			{
				if ((this._AuthorizedViewRoles != value))
				{
					this.OnAuthorizedRolesViewChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedViewRoles = value;
					this.SendPropertyChanged("AuthorizedRolesView");
					this.OnAuthorizedRolesViewChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedAddRoles", Storage="_AuthorizedAddRoles", DbType="NVarChar(256)")]
		[DataMember(Order=9)]
		public string AuthorizedRolesAdd
		{
			get
			{
				return this._AuthorizedAddRoles;
			}
			set
			{
				if ((this._AuthorizedAddRoles != value))
				{
					this.OnAuthorizedRolesAddChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedAddRoles = value;
					this.SendPropertyChanged("AuthorizedRolesAdd");
					this.OnAuthorizedRolesAddChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedDeleteRoles", Storage="_AuthorizedDeleteRoles", DbType="NVarChar(256)")]
		[DataMember(Order=10)]
		public string AuthorizedRolesDelete
		{
			get
			{
				return this._AuthorizedDeleteRoles;
			}
			set
			{
				if ((this._AuthorizedDeleteRoles != value))
				{
					this.OnAuthorizedRolesDeleteChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedDeleteRoles = value;
					this.SendPropertyChanged("AuthorizedRolesDelete");
					this.OnAuthorizedRolesDeleteChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedPropertiesRoles", Storage="_AuthorizedPropertiesRoles", DbType="NVarChar(256)")]
		[DataMember(Order=11)]
		public string AuthorizedRolesProperties
		{
			get
			{
				return this._AuthorizedPropertiesRoles;
			}
			set
			{
				if ((this._AuthorizedPropertiesRoles != value))
				{
					this.OnAuthorizedRolesPropertiesChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedPropertiesRoles = value;
					this.SendPropertyChanged("AuthorizedRolesProperties");
					this.OnAuthorizedRolesPropertiesChanged();
				}
			}
		}
		
		[Column(Storage="_CacheTime", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int CacheTime
		{
			get
			{
				return this._CacheTime;
			}
			set
			{
				if ((this._CacheTime != value))
				{
					this.OnCacheTimeChanging(value);
					this.SendPropertyChanging();
					this._CacheTime = value;
					this.SendPropertyChanged("CacheTime");
					this.OnCacheTimeChanged();
				}
			}
		}
		
		[Column(Name="ShowMobile", Storage="_ShowMobile", DbType="Bit")]
		[DataMember(Order=13)]
		public System.Nullable<bool> IsShowMobile
		{
			get
			{
				return this._ShowMobile;
			}
			set
			{
				if ((this._ShowMobile != value))
				{
					this.OnIsShowMobileChanging(value);
					this.SendPropertyChanging();
					this._ShowMobile = value;
					this.SendPropertyChanged("IsShowMobile");
					this.OnIsShowMobileChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedPublishingRoles", Storage="_AuthorizedPublishingRoles", DbType="NVarChar(256)")]
		[DataMember(Order=14)]
		public string AuthorizedRolesPublishing
		{
			get
			{
				return this._AuthorizedPublishingRoles;
			}
			set
			{
				if ((this._AuthorizedPublishingRoles != value))
				{
					this.OnAuthorizedRolesPublishingChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedPublishingRoles = value;
					this.SendPropertyChanged("AuthorizedRolesPublishing");
					this.OnAuthorizedRolesPublishingChanged();
				}
			}
		}
		
		[Column(Name="NewVersion", Storage="_NewVersion", DbType="Bit")]
		[DataMember(Order=15)]
		public System.Nullable<bool> IsNewVersion
		{
			get
			{
				return this._NewVersion;
			}
			set
			{
				if ((this._NewVersion != value))
				{
					this.OnIsNewVersionChanging(value);
					this.SendPropertyChanging();
					this._NewVersion = value;
					this.SendPropertyChanged("IsNewVersion");
					this.OnIsNewVersionChanged();
				}
			}
		}
		
		[Column(Name="SupportWorkflow", Storage="_SupportWorkflow", DbType="Bit")]
		[DataMember(Order=16)]
		public System.Nullable<bool> IsSupportWorkflow
		{
			get
			{
				return this._SupportWorkflow;
			}
			set
			{
				if ((this._SupportWorkflow != value))
				{
					this.OnIsSupportWorkflowChanging(value);
					this.SendPropertyChanging();
					this._SupportWorkflow = value;
					this.SendPropertyChanged("IsSupportWorkflow");
					this.OnIsSupportWorkflowChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedApproveRoles", Storage="_AuthorizedApproveRoles", DbType="NVarChar(256)")]
		[DataMember(Order=17)]
		public string AuthorizedRolesApprove
		{
			get
			{
				return this._AuthorizedApproveRoles;
			}
			set
			{
				if ((this._AuthorizedApproveRoles != value))
				{
					this.OnAuthorizedRolesApproveChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedApproveRoles = value;
					this.SendPropertyChanged("AuthorizedRolesApprove");
					this.OnAuthorizedRolesApproveChanged();
				}
			}
		}
		
		[Column(Storage="_WorkflowState", DbType="TinyInt")]
		[DataMember(Order=18)]
		public System.Nullable<byte> WorkflowState
		{
			get
			{
				return this._WorkflowState;
			}
			set
			{
				if ((this._WorkflowState != value))
				{
					this.OnWorkflowStateChanging(value);
					this.SendPropertyChanging();
					this._WorkflowState = value;
					this.SendPropertyChanged("WorkflowState");
					this.OnWorkflowStateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModified", DbType="DateTime")]
		[DataMember(Order=19)]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_LastEditor", DbType="NVarChar(256)")]
		[DataMember(Order=20)]
		public string LastEditor
		{
			get
			{
				return this._LastEditor;
			}
			set
			{
				if ((this._LastEditor != value))
				{
					this.OnLastEditorChanging(value);
					this.SendPropertyChanging();
					this._LastEditor = value;
					this.SendPropertyChanged("LastEditor");
					this.OnLastEditorChanged();
				}
			}
		}
		
		[Column(Storage="_StagingLastModified", DbType="DateTime")]
		[DataMember(Order=21)]
		public System.Nullable<System.DateTime> StagingLastModified
		{
			get
			{
				return this._StagingLastModified;
			}
			set
			{
				if ((this._StagingLastModified != value))
				{
					this.OnStagingLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._StagingLastModified = value;
					this.SendPropertyChanged("StagingLastModified");
					this.OnStagingLastModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_StagingLastEditor", DbType="NVarChar(256)")]
		[DataMember(Order=22)]
		public string StagingLastEditor
		{
			get
			{
				return this._StagingLastEditor;
			}
			set
			{
				if ((this._StagingLastEditor != value))
				{
					this.OnStagingLastEditorChanging(value);
					this.SendPropertyChanging();
					this._StagingLastEditor = value;
					this.SendPropertyChanged("StagingLastEditor");
					this.OnStagingLastEditorChanged();
				}
			}
		}
		
		[Column(Name="SupportCollapsable", Storage="_SupportCollapsable", DbType="Bit")]
		[DataMember(Order=23)]
		public System.Nullable<bool> IsCollapsable
		{
			get
			{
				return this._SupportCollapsable;
			}
			set
			{
				if ((this._SupportCollapsable != value))
				{
					this.OnIsCollapsableChanging(value);
					this.SendPropertyChanging();
					this._SupportCollapsable = value;
					this.SendPropertyChanged("IsCollapsable");
					this.OnIsCollapsableChanged();
				}
			}
		}
		
		[Column(Name="ShowEveryWhere", Storage="_ShowEveryWhere", DbType="Bit")]
		[DataMember(Order=24)]
		public System.Nullable<bool> IsShowEveryWhere
		{
			get
			{
				return this._ShowEveryWhere;
			}
			set
			{
				if ((this._ShowEveryWhere != value))
				{
					this.OnIsShowEveryWhereChanging(value);
					this.SendPropertyChanging();
					this._ShowEveryWhere = value;
					this.SendPropertyChanged("IsShowEveryWhere");
					this.OnIsShowEveryWhereChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedMoveModuleRoles", Storage="_AuthorizedMoveModuleRoles", DbType="NVarChar(256)")]
		[DataMember(Order=25)]
		public string AuthorizedRolesModuleMove
		{
			get
			{
				return this._AuthorizedMoveModuleRoles;
			}
			set
			{
				if ((this._AuthorizedMoveModuleRoles != value))
				{
					this.OnAuthorizedRolesModuleMoveChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedMoveModuleRoles = value;
					this.SendPropertyChanged("AuthorizedRolesModuleMove");
					this.OnAuthorizedRolesModuleMoveChanged();
				}
			}
		}
		
		[Column(Name="AuthorizedDeleteModuleRoles", Storage="_AuthorizedDeleteModuleRoles", DbType="NVarChar(256)")]
		[DataMember(Order=26)]
		public string AuthorizedRolesModuleDelete
		{
			get
			{
				return this._AuthorizedDeleteModuleRoles;
			}
			set
			{
				if ((this._AuthorizedDeleteModuleRoles != value))
				{
					this.OnAuthorizedRolesModuleDeleteChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedDeleteModuleRoles = value;
					this.SendPropertyChanged("AuthorizedRolesModuleDelete");
					this.OnAuthorizedRolesModuleDeleteChanged();
				}
			}
		}
		
		[Association(Name="Module_ModuleSetting", Storage="_ModuleSettings", ThisKey="ModuleId", OtherKey="ModuleId")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<ModuleSetting> ModuleSettings
		{
			get
			{
				if ((this.serializing 
							&& (this._ModuleSettings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ModuleSettings;
			}
			set
			{
				this._ModuleSettings.Assign(value);
			}
		}
		
		[Association(Name="Module_ModuleUserSetting", Storage="_ModuleUserSettings", ThisKey="ModuleId", OtherKey="ModuleId")]
		[DataMember(Order=28, EmitDefaultValue=false)]
		public EntitySet<ModuleUserSetting> ModuleUserSettings
		{
			get
			{
				if ((this.serializing 
							&& (this._ModuleUserSettings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ModuleUserSettings;
			}
			set
			{
				this._ModuleUserSettings.Assign(value);
			}
		}
		
		[Association(Name="Page_Module", Storage="_Page", ThisKey="PageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Modules.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Modules.Add(this);
						this._TabID = value.Id;
					}
					else
					{
						this._TabID = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[Association(Name="ModuleDefinition_Module", Storage="_ModuleDefinition", ThisKey="ModuleDefId", OtherKey="ModuleDefId", IsForeignKey=true)]
		public ModuleDefinition ModuleDefinition
		{
			get
			{
				return this._ModuleDefinition.Entity;
			}
			set
			{
				ModuleDefinition previousValue = this._ModuleDefinition.Entity;
				if (((previousValue != value) 
							|| (this._ModuleDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModuleDefinition.Entity = null;
						previousValue.Modules.Remove(this);
					}
					this._ModuleDefinition.Entity = value;
					if ((value != null))
					{
						value.Modules.Add(this);
						this._ModuleDefID = value.ModuleDefId;
					}
					else
					{
						this._ModuleDefID = default(int);
					}
					this.SendPropertyChanged("ModuleDefinition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModuleSettings(ModuleSetting entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_ModuleSettings(ModuleSetting entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_ModuleUserSettings(ModuleUserSetting entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_ModuleUserSettings(ModuleUserSetting entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void Initialize()
		{
			this._ModuleSettings = new EntitySet<ModuleSetting>(new Action<ModuleSetting>(this.attach_ModuleSettings), new Action<ModuleSetting>(this.detach_ModuleSettings));
			this._ModuleUserSettings = new EntitySet<ModuleUserSetting>(new Action<ModuleUserSetting>(this.attach_ModuleUserSettings), new Action<ModuleUserSetting>(this.detach_ModuleUserSettings));
			this._Page = default(EntityRef<Page>);
			this._ModuleDefinition = default(EntityRef<ModuleDefinition>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_Portals")]
	[DataContract()]
	public partial class Portal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PortalID;
		
		private string _PortalAlias;
		
		private string _PortalName;
		
		private string _PortalPath;
		
		private bool _AlwaysShowEditButton;
		
		private EntitySet<ModuleDefinition> _ModuleDefinitions;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<PortalSetting> _PortalSettings;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortalIdChanging(int value);
    partial void OnPortalIdChanged();
    partial void OnPortalAliasChanging(string value);
    partial void OnPortalAliasChanged();
    partial void OnPortalNameChanging(string value);
    partial void OnPortalNameChanged();
    partial void OnPortalPathChanging(string value);
    partial void OnPortalPathChanged();
    partial void OnIsAlwaysShowEditButtonChanging(bool value);
    partial void OnIsAlwaysShowEditButtonChanged();
    #endregion
		
		public Portal()
		{
			this.Initialize();
		}
		
		[Column(Name="PortalID", Storage="_PortalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PortalId
		{
			get
			{
				return this._PortalID;
			}
			set
			{
				if ((this._PortalID != value))
				{
					this.OnPortalIdChanging(value);
					this.SendPropertyChanging();
					this._PortalID = value;
					this.SendPropertyChanged("PortalId");
					this.OnPortalIdChanged();
				}
			}
		}
		
		[Column(Storage="_PortalAlias", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string PortalAlias
		{
			get
			{
				return this._PortalAlias;
			}
			set
			{
				if ((this._PortalAlias != value))
				{
					this.OnPortalAliasChanging(value);
					this.SendPropertyChanging();
					this._PortalAlias = value;
					this.SendPropertyChanged("PortalAlias");
					this.OnPortalAliasChanged();
				}
			}
		}
		
		[Column(Storage="_PortalName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string PortalName
		{
			get
			{
				return this._PortalName;
			}
			set
			{
				if ((this._PortalName != value))
				{
					this.OnPortalNameChanging(value);
					this.SendPropertyChanging();
					this._PortalName = value;
					this.SendPropertyChanged("PortalName");
					this.OnPortalNameChanged();
				}
			}
		}
		
		[Column(Storage="_PortalPath", DbType="NVarChar(128)")]
		[DataMember(Order=4)]
		public string PortalPath
		{
			get
			{
				return this._PortalPath;
			}
			set
			{
				if ((this._PortalPath != value))
				{
					this.OnPortalPathChanging(value);
					this.SendPropertyChanging();
					this._PortalPath = value;
					this.SendPropertyChanged("PortalPath");
					this.OnPortalPathChanged();
				}
			}
		}
		
		[Column(Name="AlwaysShowEditButton", Storage="_AlwaysShowEditButton", DbType="Bit NOT NULL")]
		[DataMember(Order=5)]
		public bool IsAlwaysShowEditButton
		{
			get
			{
				return this._AlwaysShowEditButton;
			}
			set
			{
				if ((this._AlwaysShowEditButton != value))
				{
					this.OnIsAlwaysShowEditButtonChanging(value);
					this.SendPropertyChanging();
					this._AlwaysShowEditButton = value;
					this.SendPropertyChanged("IsAlwaysShowEditButton");
					this.OnIsAlwaysShowEditButtonChanged();
				}
			}
		}
		
		[Association(Name="Portal_ModuleDefinition", Storage="_ModuleDefinitions", ThisKey="PortalId", OtherKey="PortalId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<ModuleDefinition> ModuleDefinitions
		{
			get
			{
				if ((this.serializing 
							&& (this._ModuleDefinitions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ModuleDefinitions;
			}
			set
			{
				this._ModuleDefinitions.Assign(value);
			}
		}
		
		[Association(Name="Portal_Page", Storage="_Pages", ThisKey="PortalId", OtherKey="PortalId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<Page> Pages
		{
			get
			{
				if ((this.serializing 
							&& (this._Pages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="Portal_PortalSetting", Storage="_PortalSettings", ThisKey="PortalId", OtherKey="PortalId")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<PortalSetting> PortalSettings
		{
			get
			{
				if ((this.serializing 
							&& (this._PortalSettings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PortalSettings;
			}
			set
			{
				this._PortalSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModuleDefinitions(ModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Portal = this;
		}
		
		private void detach_ModuleDefinitions(ModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Portal = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Portal = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Portal = null;
		}
		
		private void attach_PortalSettings(PortalSetting entity)
		{
			this.SendPropertyChanging();
			entity.Portal = this;
		}
		
		private void detach_PortalSettings(PortalSetting entity)
		{
			this.SendPropertyChanging();
			entity.Portal = null;
		}
		
		private void Initialize()
		{
			this._ModuleDefinitions = new EntitySet<ModuleDefinition>(new Action<ModuleDefinition>(this.attach_ModuleDefinitions), new Action<ModuleDefinition>(this.detach_ModuleDefinitions));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._PortalSettings = new EntitySet<PortalSetting>(new Action<PortalSetting>(this.attach_PortalSettings), new Action<PortalSetting>(this.detach_PortalSettings));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_Pages")]
	[DataContract()]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private System.Nullable<int> _ParentPageId;
		
		private int _PageOrder;
		
		private int _PortalId;
		
		private string _PageName;
		
		private string _MobilePageName;
		
		private string _AuthorizedRoles;
		
		private bool _ShowMobile;
		
		private System.Nullable<int> _PageLayout;
		
		private string _PageDescription;
		
		private EntitySet<Module> _Modules;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<PageSetting> _PageSettings;
		
		private EntityRef<Page> _rb_Page1;
		
		private EntityRef<Portal> _Portal;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnPortalIdChanging(int value);
    partial void OnPortalIdChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnNameMobileChanging(string value);
    partial void OnNameMobileChanged();
    partial void OnAuthorizedRolesChanging(string value);
    partial void OnAuthorizedRolesChanged();
    partial void OnIsShowMobileChanging(bool value);
    partial void OnIsShowMobileChanged();
    partial void OnLayoutChanging(System.Nullable<int> value);
    partial void OnLayoutChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Page()
		{
			this.Initialize();
		}
		
		[Column(Name="PageID", Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="ParentPageID", Storage="_ParentPageId", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentPageId;
			}
			set
			{
				if ((this._ParentPageId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentPageId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Name="PageOrder", Storage="_PageOrder", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int Order
		{
			get
			{
				return this._PageOrder;
			}
			set
			{
				if ((this._PageOrder != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._PageOrder = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Name="PortalID", Storage="_PortalId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int PortalId
		{
			get
			{
				return this._PortalId;
			}
			set
			{
				if ((this._PortalId != value))
				{
					this.OnPortalIdChanging(value);
					this.SendPropertyChanging();
					this._PortalId = value;
					this.SendPropertyChanged("PortalId");
					this.OnPortalIdChanged();
				}
			}
		}
		
		[Column(Storage="_PageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		private string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[Column(Name="MobilePageName", Storage="_MobilePageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string NameMobile
		{
			get
			{
				return this._MobilePageName;
			}
			set
			{
				if ((this._MobilePageName != value))
				{
					this.OnNameMobileChanging(value);
					this.SendPropertyChanging();
					this._MobilePageName = value;
					this.SendPropertyChanged("NameMobile");
					this.OnNameMobileChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizedRoles", DbType="NVarChar(512)")]
		[DataMember(Order=6)]
		public string AuthorizedRoles
		{
			get
			{
				return this._AuthorizedRoles;
			}
			set
			{
				if ((this._AuthorizedRoles != value))
				{
					this.OnAuthorizedRolesChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedRoles = value;
					this.SendPropertyChanged("AuthorizedRoles");
					this.OnAuthorizedRolesChanged();
				}
			}
		}
		
		[Column(Name="ShowMobile", Storage="_ShowMobile", DbType="Bit NOT NULL")]
		[DataMember(Order=7)]
		public bool IsShowMobile
		{
			get
			{
				return this._ShowMobile;
			}
			set
			{
				if ((this._ShowMobile != value))
				{
					this.OnIsShowMobileChanging(value);
					this.SendPropertyChanging();
					this._ShowMobile = value;
					this.SendPropertyChanged("IsShowMobile");
					this.OnIsShowMobileChanged();
				}
			}
		}
		
		[Column(Name="PageLayout", Storage="_PageLayout", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> Layout
		{
			get
			{
				return this._PageLayout;
			}
			set
			{
				if ((this._PageLayout != value))
				{
					this.OnLayoutChanging(value);
					this.SendPropertyChanging();
					this._PageLayout = value;
					this.SendPropertyChanged("Layout");
					this.OnLayoutChanged();
				}
			}
		}
		
		[Column(Name="PageDescription", Storage="_PageDescription", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		[DataMember(Order=9)]
		public string Description
		{
			get
			{
				return this._PageDescription;
			}
			set
			{
				if ((this._PageDescription != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PageDescription = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Page_Module", Storage="_Modules", ThisKey="Id", OtherKey="PageId")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<Module> Modules
		{
			get
			{
				if ((this.serializing 
							&& (this._Modules.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Modules;
			}
			set
			{
				this._Modules.Assign(value);
			}
		}
		
		[Association(Name="Page_Page", Storage="_Pages", ThisKey="Id", OtherKey="ParentId")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<Page> Pages
		{
			get
			{
				if ((this.serializing 
							&& (this._Pages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="Page_PageSetting", Storage="_PageSettings", ThisKey="Id", OtherKey="PageId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<PageSetting> PageSettings
		{
			get
			{
				if ((this.serializing 
							&& (this._PageSettings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PageSettings;
			}
			set
			{
				this._PageSettings.Assign(value);
			}
		}
		
		[Association(Name="Page_Page", Storage="_rb_Page1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Page ParentPage
		{
			get
			{
				return this._rb_Page1.Entity;
			}
			set
			{
				Page previousValue = this._rb_Page1.Entity;
				if (((previousValue != value) 
							|| (this._rb_Page1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rb_Page1.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._rb_Page1.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._ParentPageId = value.Id;
					}
					else
					{
						this._ParentPageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentPage");
				}
			}
		}
		
		[Association(Name="Portal_Page", Storage="_Portal", ThisKey="PortalId", OtherKey="PortalId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Portal Portal
		{
			get
			{
				return this._Portal.Entity;
			}
			set
			{
				Portal previousValue = this._Portal.Entity;
				if (((previousValue != value) 
							|| (this._Portal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portal.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Portal.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._PortalId = value.PortalId;
					}
					else
					{
						this._PortalId = default(int);
					}
					this.SendPropertyChanged("Portal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Modules(Module entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.ParentPage = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.ParentPage = null;
		}
		
		private void attach_PageSettings(PageSetting entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PageSettings(PageSetting entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
		
		private void Initialize()
		{
			this._Modules = new EntitySet<Module>(new Action<Module>(this.attach_Modules), new Action<Module>(this.detach_Modules));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._PageSettings = new EntitySet<PageSetting>(new Action<PageSetting>(this.attach_PageSettings), new Action<PageSetting>(this.detach_PageSettings));
			this._rb_Page1 = default(EntityRef<Page>);
			this._Portal = default(EntityRef<Portal>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_SettingGroups")]
	[DataContract()]
	public partial class SettingGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingGroupId;
		
		private string _SettingGroupName;
		
		private string _SettingGroupDescription;
		
		private EntitySet<PageSetting> _PageSettings;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingGroupIdChanging(int value);
    partial void OnSettingGroupIdChanged();
    partial void OnSettingGroupNameChanging(string value);
    partial void OnSettingGroupNameChanged();
    partial void OnSettingGroupDescriptionChanging(string value);
    partial void OnSettingGroupDescriptionChanged();
    #endregion
		
		public SettingGroup()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SettingGroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int SettingGroupId
		{
			get
			{
				return this._SettingGroupId;
			}
			set
			{
				if ((this._SettingGroupId != value))
				{
					this.OnSettingGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SettingGroupId = value;
					this.SendPropertyChanged("SettingGroupId");
					this.OnSettingGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingGroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string SettingGroupName
		{
			get
			{
				return this._SettingGroupName;
			}
			set
			{
				if ((this._SettingGroupName != value))
				{
					this.OnSettingGroupNameChanging(value);
					this.SendPropertyChanging();
					this._SettingGroupName = value;
					this.SendPropertyChanged("SettingGroupName");
					this.OnSettingGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingGroupDescription", DbType="NVarChar(255)")]
		[DataMember(Order=3)]
		public string SettingGroupDescription
		{
			get
			{
				return this._SettingGroupDescription;
			}
			set
			{
				if ((this._SettingGroupDescription != value))
				{
					this.OnSettingGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SettingGroupDescription = value;
					this.SendPropertyChanged("SettingGroupDescription");
					this.OnSettingGroupDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SettingGroup_PageSetting", Storage="_PageSettings", OtherKey="SettingGroupId")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<PageSetting> PageSettings
		{
			get
			{
				if ((this.serializing 
							&& (this._PageSettings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PageSettings;
			}
			set
			{
				this._PageSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PageSettings(PageSetting entity)
		{
			this.SendPropertyChanging();
			entity.SettingGroup = this;
		}
		
		private void detach_PageSettings(PageSetting entity)
		{
			this.SendPropertyChanging();
			entity.SettingGroup = null;
		}
		
		private void Initialize()
		{
			this._PageSettings = new EntitySet<PageSetting>(new Action<PageSetting>(this.attach_PageSettings), new Action<PageSetting>(this.detach_PageSettings));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_BaseSettingTypes")]
	[DataContract()]
	public partial class BaseSettingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BaseSettingTypeId;
		
		private string _BaseSettingTypeName;
		
		private EntitySet<BaseSetting> _BaseSettings;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBaseSettingTypeIdChanging(int value);
    partial void OnBaseSettingTypeIdChanged();
    partial void OnBaseSettingTypeNameChanging(string value);
    partial void OnBaseSettingTypeNameChanged();
    #endregion
		
		public BaseSettingType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BaseSettingTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int BaseSettingTypeId
		{
			get
			{
				return this._BaseSettingTypeId;
			}
			set
			{
				if ((this._BaseSettingTypeId != value))
				{
					this.OnBaseSettingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BaseSettingTypeId = value;
					this.SendPropertyChanged("BaseSettingTypeId");
					this.OnBaseSettingTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_BaseSettingTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string BaseSettingTypeName
		{
			get
			{
				return this._BaseSettingTypeName;
			}
			set
			{
				if ((this._BaseSettingTypeName != value))
				{
					this.OnBaseSettingTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BaseSettingTypeName = value;
					this.SendPropertyChanged("BaseSettingTypeName");
					this.OnBaseSettingTypeNameChanged();
				}
			}
		}
		
		[Association(Name="BaseSettingType_BaseSetting", Storage="_BaseSettings", OtherKey="BaseSettingTypeId")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<BaseSetting> BaseSettings
		{
			get
			{
				if ((this.serializing 
							&& (this._BaseSettings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BaseSettings;
			}
			set
			{
				this._BaseSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseSettings(BaseSetting entity)
		{
			this.SendPropertyChanging();
			entity.BaseSettingType = this;
		}
		
		private void detach_BaseSettings(BaseSetting entity)
		{
			this.SendPropertyChanging();
			entity.BaseSettingType = null;
		}
		
		private void Initialize()
		{
			this._BaseSettings = new EntitySet<BaseSetting>(new Action<BaseSetting>(this.attach_BaseSettings), new Action<BaseSetting>(this.detach_BaseSettings));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_BaseSettings")]
	[DataContract()]
	public partial class BaseSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BaseSettingId;
		
		private int _BaseSettingTypeId;
		
		private string _SettingName;
		
		private string _SettingValue;
		
		private System.Nullable<int> _SettingGroupId;
		
		private string _EnglishName;
		
		private string _Description;
		
		private string _DataType;
		
		private System.Nullable<int> _MinValue;
		
		private System.Nullable<int> _MaxValue;
		
		private System.Nullable<int> _SettingOrder;
		
		private System.Nullable<bool> _IsRequired;
		
		private EntityRef<BaseSettingType> _BaseSettingType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBaseSettingIdChanging(int value);
    partial void OnBaseSettingIdChanged();
    partial void OnBaseSettingTypeIdChanging(int value);
    partial void OnBaseSettingTypeIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    partial void OnSettingGroupIdChanging(System.Nullable<int> value);
    partial void OnSettingGroupIdChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    partial void OnMinValueChanging(System.Nullable<int> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<int> value);
    partial void OnMaxValueChanged();
    partial void OnSettingOrderChanging(System.Nullable<int> value);
    partial void OnSettingOrderChanged();
    partial void OnIsRequiredChanging(System.Nullable<bool> value);
    partial void OnIsRequiredChanged();
    #endregion
		
		public BaseSetting()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BaseSettingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int BaseSettingId
		{
			get
			{
				return this._BaseSettingId;
			}
			set
			{
				if ((this._BaseSettingId != value))
				{
					this.OnBaseSettingIdChanging(value);
					this.SendPropertyChanging();
					this._BaseSettingId = value;
					this.SendPropertyChanged("BaseSettingId");
					this.OnBaseSettingIdChanged();
				}
			}
		}
		
		[Column(Storage="_BaseSettingTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int BaseSettingTypeId
		{
			get
			{
				return this._BaseSettingTypeId;
			}
			set
			{
				if ((this._BaseSettingTypeId != value))
				{
					if (this._BaseSettingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseSettingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BaseSettingTypeId = value;
					this.SendPropertyChanged("BaseSettingTypeId");
					this.OnBaseSettingTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(1500)")]
		[DataMember(Order=4)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[Column(Storage="_SettingGroupId", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> SettingGroupId
		{
			get
			{
				return this._SettingGroupId;
			}
			set
			{
				if ((this._SettingGroupId != value))
				{
					this.OnSettingGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SettingGroupId = value;
					this.SendPropertyChanged("SettingGroupId");
					this.OnSettingGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(50)")]
		[DataMember(Order=6)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		[DataMember(Order=7)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DataType", DbType="NVarChar(50)")]
		[DataMember(Order=8)]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinValue", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[Column(Storage="_MaxValue", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[Column(Storage="_SettingOrder", DbType="Int")]
		[DataMember(Order=11)]
		public System.Nullable<int> SettingOrder
		{
			get
			{
				return this._SettingOrder;
			}
			set
			{
				if ((this._SettingOrder != value))
				{
					this.OnSettingOrderChanging(value);
					this.SendPropertyChanging();
					this._SettingOrder = value;
					this.SendPropertyChanged("SettingOrder");
					this.OnSettingOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsRequired", DbType="Bit")]
		[DataMember(Order=12)]
		public System.Nullable<bool> IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}
		
		[Association(Name="BaseSettingType_BaseSetting", Storage="_BaseSettingType", ThisKey="BaseSettingTypeId", IsForeignKey=true)]
		public BaseSettingType BaseSettingType
		{
			get
			{
				return this._BaseSettingType.Entity;
			}
			set
			{
				BaseSettingType previousValue = this._BaseSettingType.Entity;
				if (((previousValue != value) 
							|| (this._BaseSettingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseSettingType.Entity = null;
						previousValue.BaseSettings.Remove(this);
					}
					this._BaseSettingType.Entity = value;
					if ((value != null))
					{
						value.BaseSettings.Add(this);
						this._BaseSettingTypeId = value.BaseSettingTypeId;
					}
					else
					{
						this._BaseSettingTypeId = default(int);
					}
					this.SendPropertyChanged("BaseSettingType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._BaseSettingType = default(EntityRef<BaseSettingType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.rb_Monitoring")]
	[DataContract()]
	public partial class Monitoring
	{
		
		private int _ID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<int> _PortalID;
		
		private System.Nullable<int> _PageID;
		
		private System.Nullable<System.DateTime> _ActivityTime;
		
		private string _ActivityType;
		
		private string _Referrer;
		
		private string _UserAgent;
		
		private string _UserHostAddress;
		
		private string _BrowserType;
		
		private string _BrowserName;
		
		private string _BrowserVersion;
		
		private string _BrowserPlatform;
		
		private System.Nullable<bool> _BrowserIsAOL;
		
		private string _UserField;
		
		public Monitoring()
		{
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="uniqueidentifier")]
		[DataMember(Order=2)]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_PortalID", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> PortalID
		{
			get
			{
				return this._PortalID;
			}
			set
			{
				if ((this._PortalID != value))
				{
					this._PortalID = value;
				}
			}
		}
		
		[Column(Storage="_PageID", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					this._PageID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityTime", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> ActivityTime
		{
			get
			{
				return this._ActivityTime;
			}
			set
			{
				if ((this._ActivityTime != value))
				{
					this._ActivityTime = value;
				}
			}
		}
		
		[Column(Storage="_ActivityType", DbType="VarChar(50)")]
		[DataMember(Order=6)]
		public string ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this._ActivityType = value;
				}
			}
		}
		
		[Column(Storage="_Referrer", DbType="VarChar(255)")]
		[DataMember(Order=7)]
		public string Referrer
		{
			get
			{
				return this._Referrer;
			}
			set
			{
				if ((this._Referrer != value))
				{
					this._Referrer = value;
				}
			}
		}
		
		[Column(Storage="_UserAgent", DbType="VarChar(100)")]
		[DataMember(Order=8)]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this._UserAgent = value;
				}
			}
		}
		
		[Column(Storage="_UserHostAddress", DbType="VarChar(15)")]
		[DataMember(Order=9)]
		public string UserHostAddress
		{
			get
			{
				return this._UserHostAddress;
			}
			set
			{
				if ((this._UserHostAddress != value))
				{
					this._UserHostAddress = value;
				}
			}
		}
		
		[Column(Storage="_BrowserType", DbType="VarChar(100)")]
		[DataMember(Order=10)]
		public string BrowserType
		{
			get
			{
				return this._BrowserType;
			}
			set
			{
				if ((this._BrowserType != value))
				{
					this._BrowserType = value;
				}
			}
		}
		
		[Column(Storage="_BrowserName", DbType="VarChar(100)")]
		[DataMember(Order=11)]
		public string BrowserName
		{
			get
			{
				return this._BrowserName;
			}
			set
			{
				if ((this._BrowserName != value))
				{
					this._BrowserName = value;
				}
			}
		}
		
		[Column(Storage="_BrowserVersion", DbType="VarChar(100)")]
		[DataMember(Order=12)]
		public string BrowserVersion
		{
			get
			{
				return this._BrowserVersion;
			}
			set
			{
				if ((this._BrowserVersion != value))
				{
					this._BrowserVersion = value;
				}
			}
		}
		
		[Column(Storage="_BrowserPlatform", DbType="VarChar(100)")]
		[DataMember(Order=13)]
		public string BrowserPlatform
		{
			get
			{
				return this._BrowserPlatform;
			}
			set
			{
				if ((this._BrowserPlatform != value))
				{
					this._BrowserPlatform = value;
				}
			}
		}
		
		[Column(Storage="_BrowserIsAOL", DbType="Bit")]
		[DataMember(Order=14)]
		public System.Nullable<bool> BrowserIsAOL
		{
			get
			{
				return this._BrowserIsAOL;
			}
			set
			{
				if ((this._BrowserIsAOL != value))
				{
					this._BrowserIsAOL = value;
				}
			}
		}
		
		[Column(Storage="_UserField", DbType="VarChar(500)")]
		[DataMember(Order=15)]
		public string UserField
		{
			get
			{
				return this._UserField;
			}
			set
			{
				if ((this._UserField != value))
				{
					this._UserField = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.rb_Recycler")]
	[DataContract()]
	public partial class Recycler
	{
		
		private int _ModuleId;
		
		private System.DateTime _DateDeleted;
		
		private string _DeletedBy;
		
		private int _OriginalTab;
		
		public Recycler()
		{
		}
		
		[Column(Name="ModuleID", Storage="_ModuleId", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					this._ModuleId = value;
				}
			}
		}
		
		[Column(Storage="_DateDeleted", DbType="DateTime NOT NULL")]
		[DataMember(Order=2)]
		public System.DateTime DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this._DateDeleted = value;
				}
			}
		}
		
		[Column(Storage="_DeletedBy", DbType="NVarChar(250)")]
		[DataMember(Order=3)]
		public string DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					this._DeletedBy = value;
				}
			}
		}
		
		[Column(Storage="_OriginalTab", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int OriginalTab
		{
			get
			{
				return this._OriginalTab;
			}
			set
			{
				if ((this._OriginalTab != value))
				{
					this._OriginalTab = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.rb_BaseSettings")]
	[DataContract()]
	public partial class PortalSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PortalId;
		
		private string _SettingName;
		
		private string _SettingValue;
		
		private EntityRef<Portal> _Portal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortalIdChanging(int value);
    partial void OnPortalIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public PortalSetting()
		{
			this.Initialize();
		}
		
		[Column(Name="PortalID", Storage="_PortalId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int PortalId
		{
			get
			{
				return this._PortalId;
			}
			set
			{
				if ((this._PortalId != value))
				{
					this.OnPortalIdChanging(value);
					this.SendPropertyChanging();
					this._PortalId = value;
					this.SendPropertyChanged("PortalId");
					this.OnPortalIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[Association(Name="Portal_PortalSetting", Storage="_Portal", ThisKey="PortalId", OtherKey="PortalId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Portal Portal
		{
			get
			{
				return this._Portal.Entity;
			}
			set
			{
				Portal previousValue = this._Portal.Entity;
				if (((previousValue != value) 
							|| (this._Portal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portal.Entity = null;
						previousValue.PortalSettings.Remove(this);
					}
					this._Portal.Entity = value;
					if ((value != null))
					{
						value.PortalSettings.Add(this);
						this._PortalId = value.PortalId;
					}
					else
					{
						this._PortalId = default(int);
					}
					this.SendPropertyChanged("Portal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Portal = default(EntityRef<Portal>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.rb_BaseSettings")]
	[DataContract()]
	public partial class ModuleSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModuleID;
		
		private string _SettingName;
		
		private string _SettingValue;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public ModuleSetting()
		{
			this.Initialize();
		}
		
		[Column(Name="ModuleID", Storage="_ModuleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int ModuleId
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[Association(Name="Module_ModuleSetting", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.ModuleSettings.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.ModuleSettings.Add(this);
						this._ModuleID = value.ModuleId;
					}
					else
					{
						this._ModuleID = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.rb_BaseSettings")]
	[DataContract()]
	public partial class PageSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private string _SettingName;
		
		private string _SettingValue;
		
		private System.Nullable<int> _SettingGroupId;
		
		private string _EnglishName;
		
		private string _Description;
		
		private string _DataType;
		
		private int _MinValue;
		
		private System.Nullable<int> _MaxValue;
		
		private System.Nullable<int> _SettingOrder;
		
		private System.Nullable<bool> _IsRequired;
		
		private EntityRef<SettingGroup> _SettingGroup;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    partial void OnSettingGroupIdChanging(System.Nullable<int> value);
    partial void OnSettingGroupIdChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    partial void OnMinValueChanging(int value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<int> value);
    partial void OnMaxValueChanged();
    partial void OnSettingOrderChanging(System.Nullable<int> value);
    partial void OnSettingOrderChanged();
    partial void OnIsRequiredChanging(System.Nullable<bool> value);
    partial void OnIsRequiredChanged();
    #endregion
		
		public PageSetting()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PageId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[Column(Storage="_SettingGroupId", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> SettingGroupId
		{
			get
			{
				return this._SettingGroupId;
			}
			set
			{
				if ((this._SettingGroupId != value))
				{
					if (this._SettingGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SettingGroupId = value;
					this.SendPropertyChanged("SettingGroupId");
					this.OnSettingGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(50)")]
		[DataMember(Order=5)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		[DataMember(Order=6)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DataType", DbType="NVarChar(50)")]
		[DataMember(Order=7)]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinValue", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[Column(Storage="_MaxValue", DbType="Int")]
		[DataMember(Order=9)]
		public System.Nullable<int> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[Column(Storage="_SettingOrder", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> SettingOrder
		{
			get
			{
				return this._SettingOrder;
			}
			set
			{
				if ((this._SettingOrder != value))
				{
					this.OnSettingOrderChanging(value);
					this.SendPropertyChanging();
					this._SettingOrder = value;
					this.SendPropertyChanged("SettingOrder");
					this.OnSettingOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsRequired", DbType="Bit")]
		[DataMember(Order=11)]
		public System.Nullable<bool> IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}
		
		[Association(Name="SettingGroup_PageSetting", Storage="_SettingGroup", ThisKey="SettingGroupId", IsForeignKey=true)]
		public SettingGroup SettingGroup
		{
			get
			{
				return this._SettingGroup.Entity;
			}
			set
			{
				SettingGroup previousValue = this._SettingGroup.Entity;
				if (((previousValue != value) 
							|| (this._SettingGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SettingGroup.Entity = null;
						previousValue.PageSettings.Remove(this);
					}
					this._SettingGroup.Entity = value;
					if ((value != null))
					{
						value.PageSettings.Add(this);
						this._SettingGroupId = value.SettingGroupId;
					}
					else
					{
						this._SettingGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SettingGroup");
				}
			}
		}
		
		[Association(Name="Page_PageSetting", Storage="_Page", ThisKey="PageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PageSettings.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PageSettings.Add(this);
						this._PageId = value.Id;
					}
					else
					{
						this._PageId = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._SettingGroup = default(EntityRef<SettingGroup>);
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.rb_BaseSettings")]
	[DataContract()]
	public partial class ModuleUserSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModuleID;
		
		private int _UserID;
		
		private string _SettingName;
		
		private string _SettingValue;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public ModuleUserSetting()
		{
			this.Initialize();
		}
		
		[Column(Name="ModuleID", Storage="_ModuleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int ModuleId
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[Column(Name="UserID", Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int UserId
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[Association(Name="Module_ModuleUserSetting", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.ModuleUserSettings.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.ModuleUserSettings.Add(this);
						this._ModuleID = value.ModuleId;
					}
					else
					{
						this._ModuleID = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.rb_Solutions")]
	[DataContract()]
	public partial class Solution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SolutionsID;
		
		private string _SolDescription;
		
		private EntitySet<SolutionModuleDefinition> _SolutionModuleDefinitions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolutionsIDChanging(int value);
    partial void OnSolutionsIDChanged();
    partial void OnSolDescriptionChanging(string value);
    partial void OnSolDescriptionChanged();
    #endregion
		
		public Solution()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SolutionsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SolutionsID
		{
			get
			{
				return this._SolutionsID;
			}
			set
			{
				if ((this._SolutionsID != value))
				{
					this.OnSolutionsIDChanging(value);
					this.SendPropertyChanging();
					this._SolutionsID = value;
					this.SendPropertyChanged("SolutionsID");
					this.OnSolutionsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SolDescription", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string SolDescription
		{
			get
			{
				return this._SolDescription;
			}
			set
			{
				if ((this._SolDescription != value))
				{
					this.OnSolDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SolDescription = value;
					this.SendPropertyChanged("SolDescription");
					this.OnSolDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Solution_SolutionModuleDefinition", Storage="_SolutionModuleDefinitions", OtherKey="SolutionsID")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<SolutionModuleDefinition> SolutionModuleDefinitions
		{
			get
			{
				if ((this.serializing 
							&& (this._SolutionModuleDefinitions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SolutionModuleDefinitions;
			}
			set
			{
				this._SolutionModuleDefinitions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SolutionModuleDefinitions(SolutionModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Solution = this;
		}
		
		private void detach_SolutionModuleDefinitions(SolutionModuleDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Solution = null;
		}
		
		private void Initialize()
		{
			this._SolutionModuleDefinitions = new EntitySet<SolutionModuleDefinition>(new Action<SolutionModuleDefinition>(this.attach_SolutionModuleDefinitions), new Action<SolutionModuleDefinition>(this.detach_SolutionModuleDefinitions));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.rb_SolutionModuleDefinitions")]
	[DataContract()]
	public partial class SolutionModuleDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SolutionModDefID;
		
		private System.Guid _GeneralModDefID;
		
		private int _SolutionsID;
		
		private EntityRef<GeneralModuleDefinition> _GeneralModuleDefinition;
		
		private EntityRef<Solution> _Solution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolutionModDefIDChanging(int value);
    partial void OnSolutionModDefIDChanged();
    partial void OnGeneralModDefIDChanging(System.Guid value);
    partial void OnGeneralModDefIDChanged();
    partial void OnSolutionsIDChanging(int value);
    partial void OnSolutionsIDChanged();
    #endregion
		
		public SolutionModuleDefinition()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SolutionModDefID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SolutionModDefID
		{
			get
			{
				return this._SolutionModDefID;
			}
			set
			{
				if ((this._SolutionModDefID != value))
				{
					this.OnSolutionModDefIDChanging(value);
					this.SendPropertyChanging();
					this._SolutionModDefID = value;
					this.SendPropertyChanged("SolutionModDefID");
					this.OnSolutionModDefIDChanged();
				}
			}
		}
		
		[Column(Storage="_GeneralModDefID", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=2)]
		public System.Guid GeneralModDefID
		{
			get
			{
				return this._GeneralModDefID;
			}
			set
			{
				if ((this._GeneralModDefID != value))
				{
					if (this._GeneralModuleDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneralModDefIDChanging(value);
					this.SendPropertyChanging();
					this._GeneralModDefID = value;
					this.SendPropertyChanged("GeneralModDefID");
					this.OnGeneralModDefIDChanged();
				}
			}
		}
		
		[Column(Storage="_SolutionsID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int SolutionsID
		{
			get
			{
				return this._SolutionsID;
			}
			set
			{
				if ((this._SolutionsID != value))
				{
					if (this._Solution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSolutionsIDChanging(value);
					this.SendPropertyChanging();
					this._SolutionsID = value;
					this.SendPropertyChanged("SolutionsID");
					this.OnSolutionsIDChanged();
				}
			}
		}
		
		[Association(Name="GeneralModuleDefinition_SolutionModuleDefinition", Storage="_GeneralModuleDefinition", ThisKey="GeneralModDefID", OtherKey="GeneralModDefId", IsForeignKey=true)]
		public GeneralModuleDefinition GeneralModuleDefinition
		{
			get
			{
				return this._GeneralModuleDefinition.Entity;
			}
			set
			{
				GeneralModuleDefinition previousValue = this._GeneralModuleDefinition.Entity;
				if (((previousValue != value) 
							|| (this._GeneralModuleDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneralModuleDefinition.Entity = null;
						previousValue.SolutionModuleDefinitions.Remove(this);
					}
					this._GeneralModuleDefinition.Entity = value;
					if ((value != null))
					{
						value.SolutionModuleDefinitions.Add(this);
						this._GeneralModDefID = value.GeneralModDefId;
					}
					else
					{
						this._GeneralModDefID = default(System.Guid);
					}
					this.SendPropertyChanged("GeneralModuleDefinition");
				}
			}
		}
		
		[Association(Name="Solution_SolutionModuleDefinition", Storage="_Solution", ThisKey="SolutionsID", IsForeignKey=true)]
		public Solution Solution
		{
			get
			{
				return this._Solution.Entity;
			}
			set
			{
				Solution previousValue = this._Solution.Entity;
				if (((previousValue != value) 
							|| (this._Solution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Solution.Entity = null;
						previousValue.SolutionModuleDefinitions.Remove(this);
					}
					this._Solution.Entity = value;
					if ((value != null))
					{
						value.SolutionModuleDefinitions.Add(this);
						this._SolutionsID = value.SolutionsID;
					}
					else
					{
						this._SolutionsID = default(int);
					}
					this.SendPropertyChanged("Solution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._GeneralModuleDefinition = default(EntityRef<GeneralModuleDefinition>);
			this._Solution = default(EntityRef<Solution>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class aspnet_Membership_GetPasswordResult
	{
		
		private string _Column1;
		
		private System.Nullable<int> _Column2;
		
		public aspnet_Membership_GetPasswordResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="NVarChar(128)")]
		[DataMember(Order=1)]
		public string Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
		
		[Column(Storage="_Column2", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> Column2
		{
			get
			{
				return this._Column2;
			}
			set
			{
				if ((this._Column2 != value))
				{
					this._Column2 = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class aspnet_Membership_GetPasswordWithFormatResult
	{
		
		private string _Column1;
		
		private System.Nullable<int> _Column2;
		
		private string _Column3;
		
		private System.Nullable<int> _Column4;
		
		private System.Nullable<int> _Column5;
		
		private System.Nullable<bool> _Column6;
		
		private System.Nullable<System.DateTime> _Column7;
		
		private System.Nullable<System.DateTime> _Column8;
		
		public aspnet_Membership_GetPasswordWithFormatResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="NVarChar(128)")]
		[DataMember(Order=1)]
		public string Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
		
		[Column(Storage="_Column2", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> Column2
		{
			get
			{
				return this._Column2;
			}
			set
			{
				if ((this._Column2 != value))
				{
					this._Column2 = value;
				}
			}
		}
		
		[Column(Storage="_Column3", DbType="NVarChar(128)")]
		[DataMember(Order=3)]
		public string Column3
		{
			get
			{
				return this._Column3;
			}
			set
			{
				if ((this._Column3 != value))
				{
					this._Column3 = value;
				}
			}
		}
		
		[Column(Storage="_Column4", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> Column4
		{
			get
			{
				return this._Column4;
			}
			set
			{
				if ((this._Column4 != value))
				{
					this._Column4 = value;
				}
			}
		}
		
		[Column(Storage="_Column5", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> Column5
		{
			get
			{
				return this._Column5;
			}
			set
			{
				if ((this._Column5 != value))
				{
					this._Column5 = value;
				}
			}
		}
		
		[Column(Storage="_Column6", DbType="Bit")]
		[DataMember(Order=6)]
		public System.Nullable<bool> Column6
		{
			get
			{
				return this._Column6;
			}
			set
			{
				if ((this._Column6 != value))
				{
					this._Column6 = value;
				}
			}
		}
		
		[Column(Storage="_Column7", DbType="DateTime")]
		[DataMember(Order=7)]
		public System.Nullable<System.DateTime> Column7
		{
			get
			{
				return this._Column7;
			}
			set
			{
				if ((this._Column7 != value))
				{
					this._Column7 = value;
				}
			}
		}
		
		[Column(Storage="_Column8", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> Column8
		{
			get
			{
				return this._Column8;
			}
			set
			{
				if ((this._Column8 != value))
				{
					this._Column8 = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class aspnet_Membership_GetUserByEmailResult
	{
		
		private string _UserName;
		
		public aspnet_Membership_GetUserByEmailResult()
		{
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=1)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class GetModulesInTabResult
	{
		
		private int _ModuleID;
		
		private System.Guid _GeneralModDefID;
		
		public GetModulesInTabResult()
		{
		}
		
		[Column(Storage="_ModuleID", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this._ModuleID = value;
				}
			}
		}
		
		[Column(Storage="_GeneralModDefID", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=2)]
		public System.Guid GeneralModDefID
		{
			get
			{
				return this._GeneralModDefID;
			}
			set
			{
				if ((this._GeneralModDefID != value))
				{
					this._GeneralModDefID = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class FindModulesByGuidResult
	{
		
		private int _ModuleID;
		
		public FindModulesByGuidResult()
		{
		}
		
		[Column(Storage="_ModuleID", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this._ModuleID = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class GetModuleDefinitionByIDResult
	{
		
		private int _ModuleDefID;
		
		private int _PortalID;
		
		private string _FriendlyName;
		
		private string _DesktopSrc;
		
		private string _MobileSrc;
		
		private System.Nullable<bool> _Admin;
		
		private int _ModuleID;
		
		public GetModuleDefinitionByIDResult()
		{
		}
		
		[Column(Storage="_ModuleDefID", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int ModuleDefID
		{
			get
			{
				return this._ModuleDefID;
			}
			set
			{
				if ((this._ModuleDefID != value))
				{
					this._ModuleDefID = value;
				}
			}
		}
		
		[Column(Storage="_PortalID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int PortalID
		{
			get
			{
				return this._PortalID;
			}
			set
			{
				if ((this._PortalID != value))
				{
					this._PortalID = value;
				}
			}
		}
		
		[Column(Storage="_FriendlyName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string FriendlyName
		{
			get
			{
				return this._FriendlyName;
			}
			set
			{
				if ((this._FriendlyName != value))
				{
					this._FriendlyName = value;
				}
			}
		}
		
		[Column(Storage="_DesktopSrc", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string DesktopSrc
		{
			get
			{
				return this._DesktopSrc;
			}
			set
			{
				if ((this._DesktopSrc != value))
				{
					this._DesktopSrc = value;
				}
			}
		}
		
		[Column(Storage="_MobileSrc", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string MobileSrc
		{
			get
			{
				return this._MobileSrc;
			}
			set
			{
				if ((this._MobileSrc != value))
				{
					this._MobileSrc = value;
				}
			}
		}
		
		[Column(Storage="_Admin", DbType="Bit")]
		[DataMember(Order=6)]
		public System.Nullable<bool> Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this._Admin = value;
				}
			}
		}
		
		[Column(Storage="_ModuleID", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this._ModuleID = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class GetGuidResult
	{
		
		private System.Guid _GeneralModDefID;
		
		public GetGuidResult()
		{
		}
		
		[Column(Storage="_GeneralModDefID", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=1)]
		public System.Guid GeneralModDefID
		{
			get
			{
				return this._GeneralModDefID;
			}
			set
			{
				if ((this._GeneralModDefID != value))
				{
					this._GeneralModDefID = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class GetModuleInUseResult
	{
		
		private int _PortalID;
		
		private string _PortalAlias;
		
		private string _PortalName;
		
		private char _Checked;
		
		public GetModuleInUseResult()
		{
		}
		
		[Column(Storage="_PortalID", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int PortalID
		{
			get
			{
				return this._PortalID;
			}
			set
			{
				if ((this._PortalID != value))
				{
					this._PortalID = value;
				}
			}
		}
		
		[Column(Storage="_PortalAlias", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string PortalAlias
		{
			get
			{
				return this._PortalAlias;
			}
			set
			{
				if ((this._PortalAlias != value))
				{
					this._PortalAlias = value;
				}
			}
		}
		
		[Column(Storage="_PortalName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string PortalName
		{
			get
			{
				return this._PortalName;
			}
			set
			{
				if ((this._PortalName != value))
				{
					this._PortalName = value;
				}
			}
		}
		
		[Column(Storage="_Checked", DbType="VarChar(1) NOT NULL")]
		[DataMember(Order=4)]
		public char Checked
		{
			get
			{
				return this._Checked;
			}
			set
			{
				if ((this._Checked != value))
				{
					this._Checked = value;
				}
			}
		}
	}
	
	[DataContract()]
	public partial class GetModulesByNameResult
	{
		
		private int _Column1;
		
		private string _Column2;
		
		public GetModulesByNameResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="Int NOT NULL")]
		[DataMember(Order=1)]
		public int Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
		
		[Column(Storage="_Column2", DbType="NVarChar(256)")]
		[DataMember(Order=2)]
		public string Column2
		{
			get
			{
				return this._Column2;
			}
			set
			{
				if ((this._Column2 != value))
				{
					this._Column2 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
