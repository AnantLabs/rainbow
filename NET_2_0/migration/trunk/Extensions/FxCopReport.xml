<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft fxcop 1.312\Xml\FxCopReport.Xsl"?>
<FxCopReport Version="1.312">
 <Namespaces>
  <Namespace Name="AspNetResources.Web">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:25:31Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'AspNetResources.Web' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Rainbow.Configuration.Provider">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'Rainbow.Configuration.Provider' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Rainbow.Settings">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'Rainbow.Settings' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Rainbow.Settings.Cache">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'Rainbow.Settings.Cache' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Rainbow.Web">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'Rainbow.Web' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RewriteRules.Rainbow">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'RewriteRules.Rainbow' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RewriteRules.Rainbow.Tools">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'RewriteRules.Rainbow.Tools' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="System.Configuration.Provider">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in  'System.Configuration.Provider' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\bin\Debug\Rainbow.Provider.Implementation.dll">
   <Modules>
    <Module Name="rainbow.provider.implementation.dll">
     <Namespaces>
      <Namespace Name="Rainbow.Configuration">
       <Types>
        <Type Name="Log4NetLogProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Configuration" File="Log4NetLogProvider.cs" Line="17">Initialize all static fields in Rainbow.Configuration.Log4NetLogProvider when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Rainbow.Web">
       <Types>
        <Type Name="SqlUrlBuilderProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="BuildUrl(System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.String,System.String,System.String):System.Uri" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="SqlUrlBuilderProvider.cs" Line="80">SqlUrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="SqlUrlBuilderProvider.cs" Line="94">SqlUrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="SqlUrlBuilderProvider.cs" Line="165">SqlUrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="SqlUrlBuilderProvider.cs" Line="106">Replace the call to String.op_Inequality(String.Empty) in 'SqlUrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri' with a check for non-null and Length == 0.</Issue>
             <Issue Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="SqlUrlBuilderProvider.cs" Line="123">Replace the call to String.op_Inequality(String.Empty) in 'SqlUrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri' with a check for non-null and Length == 0.</Issue>
             <Issue Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="SqlUrlBuilderProvider.cs" Line="170">Replace the call to String.op_Inequality(String.Empty) in 'SqlUrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri' with a check for non-null and Length == 0.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UrlBuilderHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'Rainbow.Web.UrlBuilderHelper' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="PageSpecificProperty(System.Int32,System.String):System.Uri" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="UrlBuilderHelper.cs" Line="65">Modify 'UrlBuilderHelper.PageSpecificProperty(Int32, String):Uri' to catch a more specific exception than 'System.Object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="UrlBuilderHelper.cs" Line="57">UrlBuilderHelper.PageSpecificProperty(Int32, String):Uri makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider.Implementation\Rainbow\Web" File="UrlBuilderHelper.cs" Line="107">UrlBuilderHelper.PageSpecificProperty(Int32, String):Uri makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider\bin\Debug\Rainbow.Provider.dll">
   <Modules>
    <Module Name="rainbow.provider.dll">
     <Namespaces>
      <Namespace Name="Rainbow.Configuration">
       <Types>
        <Type Name="LogLevel" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">Add FlagsAttribute to the 'LogLevel' enumeration.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LogProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Instance():Rainbow.Configuration.LogProvider" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider\Rainbow\Configuration" File="LogProvider.cs" Line="57">LogProvider.Instance():LogProvider creates an exception of type 'System.Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Rainbow.Web">
       <Types>
        <Type Name="UrlBuilderProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="BuildUrl(System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.String,System.String,System.String):System.Uri" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
            <Message Id="2#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'modID' by changing it to 'Id'.</Issue>
            </Message>
            <Message Id="6#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error">Change the type of parameter 'urlKeywords' of method UrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri from string to System.Uri, or provide an overload of UrlBuilderProvider.BuildUrl(String, Int32, Int32, CultureInfo, String, String, String):Uri, that allows 'urlKeywords' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Instance():Rainbow.Web.UrlBuilderProvider" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CatchNonClsCompliantExceptionsInGeneralHandlers" Category="Microsoft.Security" CheckId="CA2102" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="80" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider\Rainbow\Web" File="UrlBuilderProvider.cs" Line="60">UrlBuilderProvider.Instance():UrlBuilderProvider contains a catch(Exception) handler that is not matched with a generic catch clause (catch{} in C#, catch(System::Object*){} in mc++) for non-CLSCompliant exception. Eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch (catch() in C#) that duplicates the code contained within the catch(Exception) handler.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\Rainbow.Provider\Rainbow\Web" File="UrlBuilderProvider.cs" Line="62">UrlBuilderProvider.Instance():UrlBuilderProvider creates an exception of type 'System.Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsPlaceholder(System.Int32):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TabLink(System.Int32):System.Uri" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UrlKeyword(System.Int32):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error">Change the return type of UrlBuilderProvider.UrlKeyword(Int32):String from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UrlPageName(System.Int32):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error">Change the return type of UrlBuilderProvider.UrlPageName(Int32):String from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\bin\Debug\System.Configuration.Provider.dll">
   <Modules>
    <Module Name="system.configuration.provider.dll">
     <Namespaces>
      <Namespace Name="Rainbow.Configuration.Provider">
       <Types>
        <Type Name="ProviderConfiguration" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="LoadValuesFromConfigurationXml(System.Xml.XmlNode):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="System.Xml.XmlNode" Certainty="75" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderConfiguration.cs" Line="47">Modify member 'ProviderConfiguration.LoadValuesFromConfigurationXml(XmlNode):Void' so that it no longer exposes the concrete type System.Xml.XmlNode. Use IXPathNavigable to represent Xml data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProviderConfigurationHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Create(System.Object,System.Object,System.Xml.XmlNode):System.Object" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="System.Xml.XmlNode" Certainty="75" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderConfigurationHandler.cs" Line="21">Modify member 'ProviderConfigurationHandler.Create(Object, Object, XmlNode):Object' so that it no longer exposes the concrete type System.Xml.XmlNode. Use IXPathNavigable to represent Xml data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProviderHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="InstantiateProvider(System.Configuration.ProviderSettings,System.Type):System.Configuration.Provider.ProviderBase" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Configuration.ConfigurationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderHelper.cs" Line="28">ProviderHelper.InstantiateProvider(ProviderSettings, Type):ProviderBase passes a literal as parameter 1 of a call to ConfigurationException..ctor(String). Retrieve the following string argument from a resource table instead: 'Provider could not be instantiated. The Type parameter cannot be null.'</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderHelper.cs" Line="35">ProviderHelper.InstantiateProvider(ProviderSettings, Type):ProviderBase passes a literal as parameter 1 of a call to ConfigurationException..ctor(String). Retrieve the following string argument from a resource table instead: 'Provider must implement type '______'.'</Issue>
            </Message>
            <Message Id="1#prov" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderHelper.cs" Line="27">In ProviderHelper.InstantiateProvider(ProviderSettings, Type):ProviderBase, correct the spelling of the unrecognized token 'prov' in parameter name 'provType' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InstantiateProviders(System.Configuration.Provider.ProviderCollection,System.Configuration.Provider.ProviderCollection&amp;,System.Type):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderHelper.cs" Line="62">Consider a design that does not require that 'providers' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#prov" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Rainbow\Configuration\Provider" File="ProviderHelper.cs" Line="62">In ProviderHelper.InstantiateProviders(ProviderCollection, ProviderCollection&amp;, Type):Void, correct the spelling of the unrecognized token 'prov' in parameter name 'provType' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="System.Configuration">
       <Types>
        <Type Name="ProviderSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Name(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="this" TypeName="AvoidUnusedParameters" Category="Microsoft.Performance" CheckId="CA1801" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
               <Issue Name="MarkAsStatic" Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration" File="ProviderSettings.cs" Line="21">The 'this' parameter (or 'Me' in VB) of ProviderSettings.set_Name(String):Void is never used. Mark the method as static (or Shared in VB) or use 'this'/Me in the method body.</Issue>
              </Message>
              <Message Id="value" TypeName="AvoidUnusedParameters" Category="Microsoft.Performance" CheckId="CA1801" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
               <Issue Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration" File="ProviderSettings.cs" Line="21">Parameter 'value' of ProviderSettings.set_Name(String):Void is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Type(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="this" TypeName="AvoidUnusedParameters" Category="Microsoft.Performance" CheckId="CA1801" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
               <Issue Name="MarkAsStatic" Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration" File="ProviderSettings.cs" Line="30">The 'this' parameter (or 'Me' in VB) of ProviderSettings.set_Type(String):Void is never used. Mark the method as static (or Shared in VB) or use 'this'/Me in the method body.</Issue>
              </Message>
              <Message Id="value" TypeName="AvoidUnusedParameters" Category="Microsoft.Performance" CheckId="CA1801" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
               <Issue Certainty="95" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration" File="ProviderSettings.cs" Line="30">Parameter 'value' of ProviderSettings.set_Type(String):Void is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="System.Configuration.Provider">
       <Types>
        <Type Name="NotSupportedByProviderException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2004-12-24 20:30:08Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add the following constructor to this class: protected NotSupportedByProviderException(SerializationInfo, StreamingContext)</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to this class: public NotSupportedByProviderException(String)</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to this class: public NotSupportedByProviderException(String, Exception)</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ProviderBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Initialize(System.String,System.Collections.Specialized.NameValueCollection):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.ArgumentException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Provider" File="ProviderBase.cs" Line="45">ProviderBase.Initialize(String, NameValueCollection):Void passes a literal as parameter 1 of a call to ArgumentException..ctor(String, String). Retrieve the following string argument from a resource table instead: 'Config provider name null or empty'</Issue>
            </Message>
            <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Provider\System.Configuration\Provider" File="ProviderBase.cs" Line="39">ProviderBase.Initialize(String, NameValueCollection):Void passes a literal as parameter 1 of a call to InvalidOperationException..ctor(String). Retrieve the following string argument from a resource table instead: 'Provider Already Initialized'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler\bin\Debug\Rainbow.Scheduler.dll">
   <Modules>
    <Module Name="rainbow.scheduler.dll">
     <Namespaces>
      <Namespace Name="Rainbow.Scheduler">
       <Types>
        <Type Name="CachedScheduler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="_cache" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make '_cache' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member '_cache'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InsertTask(Rainbow.Scheduler.SchedulerTask):Rainbow.Scheduler.SchedulerTask" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rainbow.Scheduler.SchedulerException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="CachedScheduler.cs" Line="135">CachedScheduler.InsertTask(SchedulerTask):SchedulerTask passes a literal as parameter 1 of a call to SchedulerException..ctor(String). Retrieve the following string argument from a resource table instead: 'Could not insert an inserted task'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Schedule(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="CachedScheduler.cs" Line="188">Modify 'CachedScheduler.Schedule(Object):Void' to catch a more specific exception than 'System.Object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CachedScheduler+TaskComparer" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="Compare(System.Object,System.Object):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="CachedScheduler.cs" Line="57">TaskComparer.Compare(Object, Object):Int32 passes a literal as parameter 1 of a call to ArgumentException..ctor(String). Retrieve the following string argument from a resource table instead: 'Impossible exception'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SchedulerDB" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="GetModuleInstance(System.Int32):Rainbow.Scheduler.ISchedulable" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CatchNonClsCompliantExceptionsInGeneralHandlers" Category="Microsoft.Security" CheckId="CA2102" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="80" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="208">SchedulerDB.GetModuleInstance(Int32):ISchedulable contains a catch(Exception) handler that is not matched with a generic catch clause (catch{} in C#, catch(System::Object*){} in mc++) for non-CLSCompliant exception. Eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch (catch() in C#) that duplicates the code contained within the catch(Exception) handler.</Issue>
             <Issue Certainty="80" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="232">SchedulerDB.GetModuleInstance(Int32):ISchedulable contains a catch(Exception) handler that is not matched with a generic catch clause (catch{} in C#, catch(System::Object*){} in mc++) for non-CLSCompliant exception. Eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch (catch() in C#) that duplicates the code contained within the catch(Exception) handler.</Issue>
            </Message>
            <Message Id="Rainbow.Scheduler.SchedulerException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="257">SchedulerDB.GetModuleInstance(Int32):ISchedulable passes a literal as parameter 1 of a call to SchedulerException..ctor(String). Retrieve the following string argument from a resource table instead: 'Module don't implement ISchedulable interface'</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="223">SchedulerDB.GetModuleInstance(Int32):ISchedulable passes a literal as parameter 1 of a call to SchedulerException..ctor(String). Retrieve the following string argument from a resource table instead: 'Not assembly in database'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="244">SchedulerDB.GetModuleInstance(Int32):ISchedulable makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetTasksByTarget(System.Int32):System.Data.IDataReader" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="32">'SchedulerDB.GetTasksByTarget(Int32):IDataReader' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InsertTask(Rainbow.Scheduler.SchedulerTask):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Data.IDataParameter.get_Value" TypeName="AvoidCallsThatBoxValueTypes" Category="Microsoft.Performance" CheckId="CA1808" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="132">SchedulerDB.InsertTask(SchedulerTask):Int32 calls IDataParameter.get_Value():Object, a weakly-typed method, and unboxes the result as Int32, a value type.</Issue>
            </Message>
            <Message Id="Rainbow.Scheduler.SchedulerException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="73">SchedulerDB.InsertTask(SchedulerTask):Int32 passes a literal as parameter 1 of a call to SchedulerException..ctor(String). Retrieve the following string argument from a resource table instead: 'Cannot schedule an expired task'</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerDB.cs" Line="137">SchedulerDB.InsertTask(SchedulerTask):Int32 passes a literal as parameter 1 of a call to SchedulerException..ctor(String). Retrieve the following string argument from a resource table instead: 'Task add fail in DB'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SchedulerException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add the following constructor to this class: protected SchedulerException(SerializationInfo, StreamingContext)</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to this class: public SchedulerException(String)</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to this class: public SchedulerException(String, Exception)</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SchedulerTask" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.Data.IDataReader)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Data.IDataRecord.get_Item(System.String)" TypeName="AvoidCallsThatBoxValueTypes" Category="Microsoft.Performance" CheckId="CA1808" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="97">SchedulerTask..ctor(IDataReader) calls IDataRecord.get_Item(String):Object, a weakly-typed method, and unboxes the result as DateTime, a value type.</Issue>
             <Issue Certainty="90" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="95">SchedulerTask..ctor(IDataReader) calls IDataRecord.get_Item(String):Object, a weakly-typed method, and unboxes the result as Int32, a value type.</Issue>
             <Issue Certainty="90" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="94">SchedulerTask..ctor(IDataReader) calls IDataRecord.get_Item(String):Object, a weakly-typed method, and unboxes the result as Int32, a value type.</Issue>
             <Issue Certainty="90" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="96">SchedulerTask..ctor(IDataReader) calls IDataRecord.get_Item(String):Object, a weakly-typed method, and unboxes the result as Int32, a value type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Int32,System.Int32,System.DateTime,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Exception.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="64">SchedulerTask..ctor(Int32, Int32, DateTime, Object) passes a literal as parameter 1 of a call to Exception..ctor(String). Retrieve the following string argument from a resource table instead: 'argument parameter must be a serializable type'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Int32,System.Int32,System.DateTime,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Exception.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="79">SchedulerTask..ctor(Int32, Int32, DateTime, String, Object) passes a literal as parameter 1 of a call to Exception..ctor(String). Retrieve the following string argument from a resource table instead: 'argument parameter must be a serializable type'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Argument" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Argument(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Exception.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="111">SchedulerTask.set_Argument(Object):Void passes a literal as parameter 1 of a call to Exception..ctor(String). Retrieve the following string argument from a resource table instead: 'argument parameter must be a serializable type'</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="111">SchedulerTask.set_Argument(Object):Void creates an exception of type 'System.Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="IDModuleOwner" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="130">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in member name 'SchedulerTask.IDModuleOwner:Int32' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IDModuleTarget" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="139">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in member name 'SchedulerTask.IDModuleTarget:Int32' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IDTask" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SchedulerTask.cs" Line="162">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in member name 'SchedulerTask.IDTask:Int32' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SimpleScheduler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="ExecuteTask(Rainbow.Scheduler.SchedulerTask):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CatchNonClsCompliantExceptionsInGeneralHandlers" Category="Microsoft.Security" CheckId="CA2102" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="80" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SimpleScheduler.cs" Line="242">SimpleScheduler.ExecuteTask(SchedulerTask):Void contains a catch(Exception) handler that is not matched with a generic catch clause (catch{} in C#, catch(System::Object*){} in mc++) for non-CLSCompliant exception. Eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch (catch() in C#) that duplicates the code contained within the catch(Exception) handler.</Issue>
             <Issue Certainty="80" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SimpleScheduler.cs" Line="248">SimpleScheduler.ExecuteTask(SchedulerTask):Void contains a catch(Exception) handler that is not matched with a generic catch clause (catch{} in C#, catch(System::Object*){} in mc++) for non-CLSCompliant exception. Eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch (catch() in C#) that duplicates the code contained within the catch(Exception) handler.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SimpleScheduler.cs" Line="232">Modify 'SimpleScheduler.ExecuteTask(SchedulerTask):Void' to catch a more specific exception than 'System.Object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InsertTask(Rainbow.Scheduler.SchedulerTask):Rainbow.Scheduler.SchedulerTask" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rainbow.Scheduler.SchedulerException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SimpleScheduler.cs" Line="203">SimpleScheduler.InsertTask(SchedulerTask):SchedulerTask passes a literal as parameter 1 of a call to SchedulerException..ctor(String). Retrieve the following string argument from a resource table instead: 'Could not insert an inserted task'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="localPeriod" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2004-12-24 20:52:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'localPeriod' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="localTimerState" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2004-12-24 20:52:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'localTimerState' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Schedule(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Scheduler" File="SimpleScheduler.cs" Line="120">Modify 'SimpleScheduler.Schedule(Object):Void' to catch a more specific exception than 'System.Object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SimpleScheduler+TimerState" Kind="Class" Accessibility="Family" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Rainbow.Scheduler.SimpleScheduler+TimerState' or change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Counter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'Counter' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Timer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2004-12-24 20:19:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'Timer' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\bin\Debug\Rainbow.Settings.dll">
   <Modules>
    <Module Name="rainbow.settings.dll">
     <Namespaces>
      <Namespace Name="Rainbow.Settings">
       <Types>
        <Type Name="Path" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2004-12-24 21:55:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'Path' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="WebPathCombine(System.String[]):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings" File="Path.cs" Line="103">Path.WebPathCombine(String[]):String creates an exception of type 'System.NullReferenceException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Portal" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2004-12-24 21:55:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'Portal' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="connectionString" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'connectionString' is declared as 'static readonly' but is initialized with a constant value 'server=localhost;database=Rainbow;uid=sa;pwd='. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="enableMultiDbSupport" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'enableMultiDbSupport' is declared as 'static readonly' but is initialized with a constant value '0'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="smtpServer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'smtpServer' is declared as 'static readonly' but is initialized with a constant value '&lt;Unknown&gt;'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UniqueID" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings" File="Portal.cs" Line="31">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in member name 'Portal.UniqueID:String' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Rainbow.Settings.Cache">
       <Types>
        <Type Name="CurrentCache" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2004-12-24 21:55:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'CurrentCache' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="CacheTime" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'CacheTime' a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RemoveAll(System.String):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Collections.IEnumerator.get_Current" TypeName="AvoidCallsThatBoxValueTypes" Category="Microsoft.Performance" CheckId="CA1808" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="CurrentCache.cs" Line="143">CurrentCache.RemoveAll(String):Void calls IEnumerator.get_Current():Object, a weakly-typed method, and unboxes the result as DictionaryEntry, a value type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Key" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2004-12-24 21:55:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'Key' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="ModuleSettings(System.Int32):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="Key.cs" Line="24">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'moduleID' by changing it to 'Id'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="Key.cs" Line="24">Key.ModuleSettings(Int32):String makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TabNavigationSettings(System.Int32,System.String):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="Key.cs" Line="63">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="Key.cs" Line="63">Key.TabNavigationSettings(Int32, String):String makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TabSettings(System.Int32):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="Key.cs" Line="52">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in parameter name 'tabID' by changing it to 'Id'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\Rainbow.Settings\Cache" File="Key.cs" Line="52">Key.TabSettings(Int32):String makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\RewriteRules.Rainbow\bin\Debug\RewriteRules.Rainbow.dll">
   <Modules>
    <Module Name="rewriterules.rainbow.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'RewriteRules.Rainbow' with a strong name key.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="RewriteRules.Rainbow">
       <Types>
        <Type Name="DefaultRule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Execute(System.Web.HttpApplication,System.String,System.String):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\RewriteRules.Rainbow" File="DefaultRule.cs" Line="32">DefaultRule.Execute(HttpApplication, String, String):String makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\RewriteRules.Rainbow" File="DefaultRule.cs" Line="32">DefaultRule.Execute(HttpApplication, String, String):String makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LegacyRule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Execute(System.Web.HttpApplication,System.String,System.String):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2004-12-24 20:08:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\RewriteRules.Rainbow" File="LegacyRule.cs" Line="29">LegacyRule.Execute(HttpApplication, String, String):String makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RewriteRules.Rainbow.Tools">
       <Types>
        <Type Name="General" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2004-12-24 21:55:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'General' as sealed.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\DevelopmentData\Projects\Rainbow Portal\Extensions\XHTMLHTTPModule\bin\Debug\XHTMLHTTPModule.dll">
   <Modules>
    <Module Name="xhtmlhttpmodule.dll">
     <Namespaces>
      <Namespace Name="AspNetResources.Web">
       <Types>
        <Type Name="PageFilterStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Write(System.Byte[],System.Int32,System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2004-12-24 20:25:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'PageFilterStream.Write(Byte[], Int32, Int32):Void' to catch a more specific exception than 'System.Object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XHTMLHTTPModule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2004-12-24 20:25:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the capitalization of type name 'XHTMLHTTPModule'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign '{0}' with a strong name key.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/AssembliesShouldHaveValidStrongNames.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="AvoidCallsThatBoxValueTypes" Category="Microsoft.Performance" CheckId="CA1808">
   <Name>Avoid calls that box value types</Name>
   <Description>Weakly typed methods that return value types results in boxing. Prefer calling a strongly-typed version of the method, if it is available.</Description>
   <Resolution Name="Default">{0} calls {1}, a weakly-typed method, and unboxes the result as {2}, a value type.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/AvoidCallsThatBoxValueTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in  '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/AvoidNamespacesWithFewTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the FxCop team.</Description>
   <Resolution Name="Default">'{0}' appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/AvoidUncalledPrivateCode.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">'{0}' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/AvoidUninstantiatedInternalClasses.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedParameters" Category="Microsoft.Performance" CheckId="CA1801">
   <Name>Avoid unused parameters</Name>
   <Description>Avoid declaring parameters that are not used in the method body. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter '{0}' of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Resolution Name="MarkAsStatic">The 'this' parameter (or 'Me' in VB) of {0} is never used. Mark the method as static (or Shared in VB) or use 'this'/Me in the method body.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/AvoidUnusedParameters.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="CatchNonClsCompliantExceptionsInGeneralHandlers" Category="Microsoft.Security" CheckId="CA2102">
   <Name>Catch non-CLSCompliant exceptions in general handlers</Name>
   <Description>Exception handlers which are truly intended to catch all exceptions should handle non-CLSCompliant exceptions if there is a possibility one can be raised. If possible, catch handlers should only catch specific exceptions or exception base types. In circumstances where a handler is required to catch all exceptions (e.g., when a try block wraps arbitrary plug-in code), the handler should also include a generic catch handler (in C#, catch{ ... }) to handle non-CLSCompliant exceptions. It is possible to raise non-CLSCompliant exceptions by modifying and recompiling IL.</Description>
   <Resolution Name="Default">{0} contains a catch(Exception) handler that is not matched with a generic catch clause (catch{{}} in C#, catch(System::Object*){{}} in mc++) for non-CLSCompliant exception. Eliminate the catch(Exception) clause by catching a specific set of Exceptions or add a generic catch (catch() in C#) that duplicates the code contained within the catch(Exception) handler.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Security/CatchNonClsCompliantExceptionsInGeneralHandlers.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="SecurityRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch Exceptions or SystemExceptions</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify '{0}' to catch a more specific exception than '{1}' or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/DoNotCatchGeneralExceptionTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Public or protected instance fields limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the  implementation details of the underlying data.</Description>
   <Resolution Name="Default">Make '{0}' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/DoNotDeclareVisibleInstanceFields.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>String literals that are embedded in source code are difficult to localize. Avoid passing string literals as arguments in circumstances where a localized string is generally expected. Most localized applications, for example, should localize string arguments that are passed to exception constructors. When creating an Exception instance, therefore, a string argument retrieved from a string table is more appropriate than a string literal.</Description>
   <Resolution Name="Default">{0} passes a literal as parameter {1} of a call to {2}. Retrieve the following string argument from a resource table instead: '{3}'</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Globalization/DoNotPassLiteralsAsLocalizedParameters.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that '{0}' be a reference parameter.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/DoNotPassTypesByReference.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="Reserved">{0} creates an exception of type '{1}', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Resolution Name="TooGeneric">{0} creates an exception of type '{1}', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Usage/DoNotRaiseReservedExceptionTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Parameter">In {0}, correct the spelling of the unrecognized token '{1}' in parameter name '{2}' or strip it entirely if it represents any sort of hungarian notation.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Naming/IdentifiersShouldBeSpelledCorrectly.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="NamingRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove all underscores from member '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Naming/IdentifiersShouldNotContainUnderscores.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="Default">Add the following constructor to this class: {0}</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/ImplementStandardExceptionConstructors.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/InitializeReferenceTypeStaticFieldsInline.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705">
   <Name>Long acronyms should be pascal-cased</Name>
   <Description>Acronyms of three or more letters should be Pascal-cased. For example, use XmlSpace rather than XMLSpace. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Type">Correct the capitalization of type name '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Naming/LongAcronymsShouldBePascalCased.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027">
   <Name>Mark enums with FlagsAttribute</Name>
   <Description>The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration.</Description>
   <Resolution Name="Default">Add FlagsAttribute to the '{0}' enumeration.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/MarkEnumsWithFlags.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059">
   <Name>Members should not expose certain concrete types</Name>
   <Description>Members should not expose certain concrete types.</Description>
   <Resolution Name="System.Xml.XmlNode">Modify member '{0}' so that it no longer exposes the concrete type {1}. Use IXPathNavigable to represent Xml data sources.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/MembersShouldNotExposeCertainConcreteTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type '{0}' or change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/NestedTypesShouldNotBeVisible.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making '{0}' a constant.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Usage/NonConstantFieldsShouldNotBeVisible.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706">
   <Name>Short acronyms should be uppercase</Name>
   <Description>Two letter acronyms should be upper-cased. For example, use System.IO instead of System.Io. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="MemberId">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of 'ID' in member name '{0}' by changing it to 'Id'.</Resolution>
   <Resolution Name="ParameterId">'Id' is an abbreviation, not an acronym, and is not subject to this rule. Correct the capitalization of '{0}' in parameter name '{1}' by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Naming/ShortAcronymsShouldBeUppercase.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a System.Globalization.CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a CultureInfo. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Globalization/SpecifyCultureInfo.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the common language runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide an IFormatProvider. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Globalization/SpecifyIFormatProvider.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052">
   <Name>Static holder types should be sealed</Name>
   <Description>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</Description>
   <Resolution Name="Default">Mark '{0}' as sealed.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/StaticHolderTypesShouldBeSealed.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="Default">Replace the call to String.{0}({1}) in '{2}' with a check for non-null and Length == 0.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/TestForEmptyStringsUsingStringLength.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>Uri parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as Uri.</Description>
   <Resolution Name="Default">Change the type of parameter '{0}' of method {1} from string to System.Uri, or provide an overload of {1}, that allows '{0}' to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/UriParametersShouldNotBeStrings.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055">
   <Name>Uri return values should not be strings</Name>
   <Description>If a function name contains "uri" or "url" or "urn" and the return type is string, the return type should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the return type of {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Design/UriReturnValuesShouldNotBeStrings.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.312.0.0" />
  </Rule>
  <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
   <Name>Use literals where appropriate</Name>
   <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
   <Resolution Name="Default">Field '{0}' is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.312&amp;&amp;url=/Performance/UseLiteralsWhereAppropriate.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.312.0.0" />
  </Rule>
 </Rules>
</FxCopReport>
