#region This code has been generated by KickStarter :- http://kickstarter.net
// ===============================================================================
// 
// This code has been generated by KickStarter :- http://kickstarter.net
// 
// Version :- 2.0.30.18519
// Date    :- 04/11/2003
// Time    :- 13.21
// 
// ===============================================================================
// 
// Copyright (C) 2002 - 2003 KickStarter
// 
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR
// FITNESS FOR A PARTICULAR PURPOSE.
// 
// ===============================================================================
#endregion

using System;
using System.Data;
using System.Data.SqlClient;
using Rainbow.Configuration;
using Rainbow.KickStarter.CommonClasses;


namespace Rainbow.ECommerce.BusinessLayer 
{

	/// <summary>
	/// Purpose: EcommerceMerchantsData is a container class for the EcommerceMerchants class, it contains variable and property definitions to access all the fields in the rb_EcommerceMerchants table.
	/// </summary>
	[Serializable]
	public abstract class EcommerceMerchantsData 
	{
	
		#region Fields
		
		private string _MerchantID;
		private int _PortalID;
		private string _GatewayName;
		private string _Name;
		private string _MerchantEmail;
		private string _TechnicalEmail;
		private string _MetadataXml;
		private string _MerchantType;
		private int _BINARY_CHECKSUM;
		
		#endregion
		
		#region Properties
		
		/// <summary>
		/// Purpose: Property to access the MerchantID field.
		/// </summary>
		public string MerchantID 
		{
			set 
			{
				this._MerchantID = value;
			}
			get 
			{
				return this._MerchantID;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the PortalID field.
		/// </summary>
		public int PortalID 
		{
			set 
			{
				this._PortalID = value;
			}
			get 
			{
				return this._PortalID;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the GatewayName field.
		/// </summary>
		public string GatewayName 
		{
			set 
			{
				this._GatewayName = value;
			}
			get 
			{
				return this._GatewayName;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the Name field.
		/// </summary>
		public string Name 
		{
			set 
			{
				this._Name = value;
			}
			get 
			{
				return this._Name;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the MerchantEmail field.
		/// </summary>
		public string MerchantEmail 
		{
			set 
			{
				this._MerchantEmail = value;
			}
			get 
			{
				return this._MerchantEmail;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the TechnicalEmail field.
		/// </summary>
		public string TechnicalEmail 
		{
			set 
			{
				this._TechnicalEmail = value;
			}
			get 
			{
				return this._TechnicalEmail;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the MetadataXml field.
		/// </summary>
		public string MetadataXml 
		{
			set 
			{
				this._MetadataXml = value;
			}
			get 
			{
				return this._MetadataXml;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the MerchantType field.
		/// </summary>
		public string MerchantType 
		{
			set 
			{
				this._MerchantType = value;
			}
			get 
			{
				return this._MerchantType;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the _BINARY_CHECKSUM field.
		/// </summary>
		public int BINARY_CHECKSUM 
		{
			set 
			{
				this._BINARY_CHECKSUM = value;
			}
			get 
			{
				return this._BINARY_CHECKSUM;
			}
		}
		
		#endregion
		
	}
	
	
	/// <summary>
	/// Purpose: EcommerceMerchants contains all the methods and events to manipulate the rb_EcommerceMerchants table.
	/// </summary>
	[Serializable]
	public class EcommerceMerchants : EcommerceMerchantsData 
	{
	
		#region Constructors
		
		/// <summary>
		/// Purpose: Default Constructor.
		/// </summary>
		public EcommerceMerchants() 
		{		
			try 
			{
				SetDefault();
			}
			catch(Exception ex)
			{
				Rainbow.Configuration.ErrorHandler.Publish(LogLevel.Error,"EcommerceMerchants SetDefault()", ex);
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Constructor that Automaticaly selects the EcommerceMerchants object from the Primary Key value's passed in as parameters.
		/// </summary>
		/// <param name="MerchantID" type="string">Primary Key Field.</param>
		public EcommerceMerchants(string MerchantID) 
		{
			try 
			{
				Select(MerchantID);
			}
			catch(Exception ex) 
			{
				Rainbow.Configuration.ErrorHandler.Publish(LogLevel.Error,"EcommerceMerchants Select(" + MerchantID + ")", ex);
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Constructor to initialize the EcommerceMerchants with the contents of the DataRow
		/// </summary>
		/// <param name="dataRow" type="DataRow">DataRow to initialize the object with.</param>
		public EcommerceMerchants(DataRow dataRow) 
		{
			try 
			{
				this.SetData(dataRow);
			}
			catch(Exception ex) 
			{
				Rainbow.Configuration.ErrorHandler.Publish(LogLevel.Error,"EcommerceMerchants SetData(dataRow)", ex);
				throw; 
			}
		}
		
		
		#endregion
		
		#region Delegates
		
		/// <summary>
		/// Purpose: Delegate used in RowSelect, RowInsert, RowUpdate and RowDelete Events.
		/// </summary>
		/// <param name="sender" type="EcommerceMerchants">The EcommerceMerchants object that raised the event.</param>
		/// <param name="e" type="DataChangeEventArgs">The Event Arguments, Contains Action (Select, Insert, Update, Delete).</param>
		public delegate void EcommerceMerchantsEventHandler(EcommerceMerchants sender, DataChangeEventArgs e);
		
		#endregion
		
		#region Events
		
		/// <summary>
		/// Purpose: Event to notify when the Object has been Selected, Inserted, Updated or Deleted
		/// </summary>
		/// <delegate>EcommerceMerchantsEventHandler</delegate>
		[field:NonSerialized()]
		public event EcommerceMerchantsEventHandler DataAction;
		
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Purpose: Set's the default value's in the EcommerceMerchants object when it is created.
		/// This is where you would add any custom default code.
		/// </summary>
		protected void SetDefault() 
		{		
			try 
			{
				MerchantType = "G";
			}
			catch(Exception ex) 
			{
				Rainbow.Configuration.ErrorHandler.Publish(LogLevel.Error,"EcommerceMerchants SetDefault()", ex);
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Validates the data in the EcommerceMerchants object before the Insert and Update methods are called.
		/// </summary>
		/// <param name="Action" type="string">Action Type: Insert, Update.</param>
		protected bool Validate(string Action) 
		{
		
			bool bReturn = false;
			
			try 
			{
				switch(Action) 
				{
					case "Insert" :
					case "Update" :
						if (this.MerchantID == null) 
						{
							throw new Exception("Merchant ID is a required field !");
						}
						if (this.MerchantType == null) 
						{
							throw new Exception("Merchant Type is a required field !");
						}
						bReturn = true;
						break;
					
					default :
						bReturn = true;
						break;
					
				}
				return bReturn;
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Populates the EcommerceMerchantsData class with the contents of the DataRow provided.
		/// </summary>
		/// <param name="dataRow" type="DataRow">The data row object.</param>
		public void SetData(DataRow dataRow) 
		{
		
			try 
			{
				if (dataRow["MerchantID"] == DBNull.Value) 
				{
					this.MerchantID = null;
				}
				else 
				{
					this.MerchantID = Convert.ToString(dataRow["MerchantID"]);
				}
				if (dataRow["PortalID"] == DBNull.Value) 
				{
					this.PortalID = int.MinValue;
				}
				else 
				{
					this.PortalID = Convert.ToInt32(dataRow["PortalID"]);
				}
				if (dataRow["GatewayName"] == DBNull.Value) 
				{
					this.GatewayName = null;
				}
				else 
				{
					this.GatewayName = Convert.ToString(dataRow["GatewayName"]);
				}
				if (dataRow["Name"] == DBNull.Value) 
				{
					this.Name = null;
				}
				else 
				{
					this.Name = Convert.ToString(dataRow["Name"]);
				}
				if (dataRow["MerchantEmail"] == DBNull.Value) 
				{
					this.MerchantEmail = null;
				}
				else 
				{
					this.MerchantEmail = Convert.ToString(dataRow["MerchantEmail"]);
				}
				if (dataRow["TechnicalEmail"] == DBNull.Value) 
				{
					this.TechnicalEmail = null;
				}
				else 
				{
					this.TechnicalEmail = Convert.ToString(dataRow["TechnicalEmail"]);
				}
				if (dataRow["MetadataXml"] == DBNull.Value) 
				{
					this.MetadataXml = null;
				}
				else 
				{
					this.MetadataXml = Convert.ToString(dataRow["MetadataXml"]);
				}
				if (dataRow["MerchantType"] == DBNull.Value) 
				{
					this.MerchantType = null;
				}
				else 
				{
					this.MerchantType = Convert.ToString(dataRow["MerchantType"]);
				}
				if (dataRow["BINARY_CHECKSUM"] == DBNull.Value) 
				{
					this.BINARY_CHECKSUM = 0;
				}
				else 
				{
					this.BINARY_CHECKSUM = Convert.ToInt32(dataRow["BINARY_CHECKSUM"]);
				}
				if (DataAction != null) 
				{
					DataAction(this, new DataChangeEventArgs(Action.Select));
				}
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Selects all the values from the EcommerceMerchants table by calling the 'EcommerceMerchantsSelectAll' stored procedure.
		/// </summary>
		/// <param name="sqlCommand" type="SqlCommand">Sql Command Object.</param>
		public static DataSet Select(SqlCommand sqlCommand) 
		{
			try 
			{
				return Rainbow.KickStarter.CommonClasses.SqlHelper.ExecuteDataSet(Config.ConnectionString, sqlCommand);
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
		}
		
		
		/// <summary>
		/// Purpose: Selects all the values from the EcommerceMerchants table by calling the 'EcommerceMerchantsSelectAll' stored procedure.
		/// </summary>
		public static DataSet SelectGateways() 
		{
			try 
			{
				SqlCommand sqlCommand = new SqlCommand();
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.CommandText = "rb_EcommerceMerchantsSelectAllGateways";
				
				DataSet dataSet = Select(sqlCommand);
				
				DataColumn[] PrimaryKeyColumns = new DataColumn[] {dataSet.Tables[0].Columns["MerchantID"]};
				dataSet.Tables[0].Constraints.Add("PK_EcommerceMerchants", PrimaryKeyColumns, true);
				
				return dataSet;
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
			catch 
			{
				throw;
			}
		}

		/// <summary>
		/// Purpose: Selects all the values from the EcommerceMerchants table by calling the 'EcommerceMerchantsSelectAll' stored procedure.
		/// </summary>
		public static DataSet SelectShipping() 
		{
		
			try 
			{
				SqlCommand sqlCommand = new SqlCommand();
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.CommandText = "rb_EcommerceMerchantsSelectAllShipping";
				
				DataSet dataSet = Select(sqlCommand);
				
				DataColumn[] PrimaryKeyColumns = new DataColumn[] {dataSet.Tables[0].Columns["MerchantID"]};
				dataSet.Tables[0].Constraints.Add("PK_EcommerceMerchants", PrimaryKeyColumns, true);
				
				return dataSet;
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
		}
		
		
		/// <summary>
		/// Purpose: Selects the values of EcommerceMerchants table using the primary key into the EcommerceMerchants object by calling the 'EcommerceMerchantsSelect' stored procedure.
		/// </summary>
		/// <param name="MerchantID" type="string">EcommerceMerchants Primary Key value.</param>
		public bool Select(string MerchantID) 
		{
		
			bool bReturn = false;
			
			try 
			{
				SqlCommand sqlCommand = new SqlCommand();
				sqlCommand.CommandText = "rb_EcommerceMerchantsSelect";
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add("@MerchantID", SqlDbType.NVarChar).Value = MerchantID;
				
				DataSet dataSet = Rainbow.KickStarter.CommonClasses.SqlHelper.ExecuteDataSet(Config.ConnectionString, sqlCommand);
				
				if (dataSet.Tables[0].Rows.Count > 0) 
				{
					this.SetData(dataSet.Tables[0].Rows[0]);
					
					bReturn = true;
				}
				
				return bReturn;
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Inserts the EcommerceMerchants record by calling the 'EcommerceMerchantsInsert' stored procedure.
		/// </summary>
		public bool Insert() 
		{
		
			try 
			{
				return Insert(null);
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Inserts the EcommerceMerchants record by calling the 'EcommerceMerchantsInsert' stored procedure.
		/// </summary>
		/// <param name="sqlTransaction" type="SqlTransaction">SqlTransaction to be used in the Insert.</param>
		public bool Insert(SqlTransaction sqlTransaction) 
		{
		
			try 
			{
				Validate("Insert");
				
				SqlCommand sqlCommand = new SqlCommand();
				sqlCommand.CommandText = "rb_EcommerceMerchantsInsert";
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add("@MerchantID", SqlDbType.NVarChar).Value = this.MerchantID;
				if (this.PortalID == int.MinValue) 
				{
					sqlCommand.Parameters.Add("@PortalID", SqlDbType.Int).Value = null;
				}
				else 
				{
					sqlCommand.Parameters.Add("@PortalID", SqlDbType.Int).Value = this.PortalID;
				}
				sqlCommand.Parameters.Add("@GatewayName", SqlDbType.NVarChar).Value = this.GatewayName;
				sqlCommand.Parameters.Add("@Name", SqlDbType.NVarChar).Value = this.Name;
				sqlCommand.Parameters.Add("@MerchantEmail", SqlDbType.NVarChar).Value = this.MerchantEmail;
				sqlCommand.Parameters.Add("@TechnicalEmail", SqlDbType.NVarChar).Value = this.TechnicalEmail;
				sqlCommand.Parameters.Add("@MetadataXml", SqlDbType.NVarChar).Value = this.MetadataXml;
				sqlCommand.Parameters.Add("@MerchantType", SqlDbType.Char).Value = this.MerchantType;
				
				if (sqlTransaction != null) 
				{
					SqlHelper.ExecuteNonQuery(sqlTransaction, Config.ConnectionString, sqlCommand);
				}
				else 
				{
					SqlHelper.ExecuteNonQuery(Config.ConnectionString, sqlCommand);
				}
				
				if (DataAction != null) 
				{
					DataAction(this, new DataChangeEventArgs(Action.Insert));
				}
				
				return true;
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Updates the EcommerceMerchants record by calling the 'EcommerceMerchantsUpdate' stored procedure.
		/// </summary>
		public bool Update() 
		{
		
			try 
			{
				return Update(null);
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Updates the EcommerceMerchants record by calling the 'EcommerceMerchantsUpdate' stored procedure.
		/// </summary>
		/// <param name="sqlTransaction" type="SqlTransaction">SqlTransaction to be used in the Insert.</param>
		public bool Update(SqlTransaction sqlTransaction) 
		{
		
			try 
			{
				Validate("Update");
				
				SqlCommand sqlCommand = new SqlCommand();
				sqlCommand.CommandText = "rb_EcommerceMerchantsUpdate";
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add("@MerchantID", SqlDbType.NVarChar).Value = this.MerchantID;
				if (this.PortalID == int.MinValue) 
				{
					sqlCommand.Parameters.Add("@PortalID", SqlDbType.Int).Value = null;
				}
				else 
				{
					sqlCommand.Parameters.Add("@PortalID", SqlDbType.Int).Value = this.PortalID;
				}
				sqlCommand.Parameters.Add("@GatewayName", SqlDbType.NVarChar).Value = this.GatewayName;
				sqlCommand.Parameters.Add("@Name", SqlDbType.NVarChar).Value = this.Name;
				sqlCommand.Parameters.Add("@MerchantEmail", SqlDbType.NVarChar).Value = this.MerchantEmail;
				sqlCommand.Parameters.Add("@TechnicalEmail", SqlDbType.NVarChar).Value = this.TechnicalEmail;
				sqlCommand.Parameters.Add("@MetadataXml", SqlDbType.NVarChar).Value = this.MetadataXml;
				sqlCommand.Parameters.Add("@MerchantType", SqlDbType.Char).Value = this.MerchantType;
				sqlCommand.Parameters.Add("@BINARY_CHECKSUM", SqlDbType.Int).Value = this.BINARY_CHECKSUM;
				sqlCommand.Parameters["@BINARY_CHECKSUM"].Direction = ParameterDirection.InputOutput;
				
				if (sqlTransaction != null) 
				{
					SqlHelper.ExecuteNonQuery(sqlTransaction, Config.ConnectionString, sqlCommand);
				}
				else 
				{
					SqlHelper.ExecuteNonQuery(Config.ConnectionString, sqlCommand);
				}
				
				this.BINARY_CHECKSUM = Convert.ToInt32(sqlCommand.Parameters["@BINARY_CHECKSUM"].Value);
				
				if (DataAction != null) 
				{
					DataAction(this, new DataChangeEventArgs(Action.Update));
				}
				
				return true;
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Deletes the EcommerceMerchants record by calling the 'EcommerceMerchantsDelete' stored procedure.
		/// </summary>
		public bool Delete() 
		{
		
			try 
			{
				return Delete(null);
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Deletes the EcommerceMerchants record by calling the 'EcommerceMerchantsDelete' stored procedure.
		/// </summary>
		/// <param name="sqlTransaction" type="SqlTransaction">SqlTransaction to be used in the Insert.</param>
		public bool Delete(SqlTransaction sqlTransaction) 
		{
		
			try 
			{
				SqlCommand sqlCommand = new SqlCommand();
				sqlCommand.CommandText = "rb_EcommerceMerchantsDelete";
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add("@MerchantID", SqlDbType.NVarChar).Value = this.MerchantID;
				
				if (sqlTransaction != null) 
				{
					SqlHelper.ExecuteNonQuery(sqlTransaction, Config.ConnectionString, sqlCommand);
				}
				else 
				{
					SqlHelper.ExecuteNonQuery(Config.ConnectionString, sqlCommand);
				}
				
				if (DataAction != null) 
				{
					DataAction(this, new DataChangeEventArgs(Action.Delete));
				}
				
				return true;
			}
			catch(SqlException e) 
			{
				throw new Exception(Rainbow.KickStarter.CommonClasses.Error.SqlMessage(e, "EcommerceMerchants"), e);
			}
			catch 
			{
				throw;
			}
		}
		
		
		#endregion
		
		#region Operator Overloads
		
		/// <summary>
		/// Purpose: Operator overload to convert an string to a EcommerceMerchants.
		/// </summary>
		public static implicit operator string(EcommerceMerchants Value) 
		{
		
			try 
			{
				return Value.MerchantID;
			}
			catch 
			{
				throw;
			}
		}
		
		
		/// <summary>
		/// Purpose: Operator overload to convert an EcommerceMerchants to a string.
		/// </summary>
		public static explicit operator EcommerceMerchants(string Value) 
		{
		
			try 
			{
				return new EcommerceMerchants(Value);
			}
			catch 
			{
				throw;
			}
		}
		
		
		#endregion
	}
}