#region This code has been generated by KickStarter :- http://kickstarter.net
// ===============================================================================
// 
// This code has been generated by KickStarter :- http://kickstarter.net
// 
// Version :- 2.0.30.18519
// Date    :- 30/10/2003
// Time    :- 16.27
// 
// ===============================================================================
// 
// Copyright (C) 2002 - 2003 KickStarter
// 
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR
// FITNESS FOR A PARTICULAR PURPOSE.
// 
// ===============================================================================
#endregion

using System;
using System.Collections;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Esperantus;
using Rainbow.Security;
using Rainbow.Configuration;
using Rainbow.UI;
using Rainbow.UI.WebControls;
using Rainbow.UI.DataTypes;
using Rainbow.Admin;
using Rainbow.KickStarter.CommonClasses;

namespace Rainbow.ECommerce 
{
	/// <summary>
	/// Purpose: Code Behind class for the MerchantManager control.
	/// </summary>
	public class MerchantManagerGateway : PortalModuleControl 
	{
		/// <summary>
		/// Initial Revision by Manu, manudea@duemetri.it 30/10/2003
		/// </summary>
		public override Guid GuidID 
		{
			get
			{
				return new Guid("{9FB097B9-6E01-4509-9633-E5C9E3465315}");
			}
		}

		/// <summary>
		/// Admin Module
		/// </summary>
		public override bool AdminModule
		{
			get
			{
				return true;
			}
		}

		# region Install / Uninstall Implementation
		public override void Install(System.Collections.IDictionary stateSaver)
		{
			string currentScriptName = Server.MapPath(this.TemplateSourceDirectory + "/MerchantManager_install.sql");
			ArrayList errors = Rainbow.Helpers.DBHelper.ExecuteScript(currentScriptName, true);
			if (errors.Count > 0)
			{
				// Call rollback
				throw new Exception("Error occurred:" + errors[0].ToString());
			}
		}

		public override void Uninstall(System.Collections.IDictionary stateSaver)
		{
			string currentScriptName = Server.MapPath(this.TemplateSourceDirectory + "/MerchantManager_uninstall.sql");
			ArrayList errors = Rainbow.Helpers.DBHelper.ExecuteScript(currentScriptName, true);
			if (errors.Count > 0)
			{
				// Call rollback
				throw new Exception("Error occurred:" + errors[0].ToString());
			}
		}
		#endregion
	
		#region Constructors
		
		/// <summary>
		/// Purpose: Default Constructor.
		/// </summary>
		public MerchantManagerGateway() 
		{
		
			
		}
		
		
		#endregion
		
		#region Events
		
		/// <summary>
		/// Purpose: Notify when Record has been Selected, Inserted, Updated or Deleted.
		/// </summary>
		/// <delegate>Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.EcommerceMerchantsEventHandler</delegate>
		[field:NonSerialized()]
		public event Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.EcommerceMerchantsEventHandler DataAction;
		/// <summary>
		/// Purpose: Notify when Editing has been cancled.
		/// </summary>
		/// <delegate>EventHandler</delegate>
		[field:NonSerialized()]
		public event EventHandler CancelEdit;
		
		#endregion
		
		#region Fields
		
		protected ListBox lbEcommerceMerchants;
		protected MerchantManagerEditGateway EcommerceMerchantsEdit;
		protected System.Web.UI.WebControls.ListBox lbrb_EcommerceMerchants;
		protected Label lblError;
		
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Purpose: Method to Handle the Page.Load event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="e" type="System.EventArgs"></param>
		private void Page_Load(object sender, System.EventArgs e) 
		{		
			try 
			{
				if (this.Page.IsPostBack) 
				{
					this.lblError.Text = "";
				}
				else 
				{
					PopulateList();
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to override the OnInit method.
		/// </summary>
		/// <param name="e" type="System.EventArgs"></param>
		override protected void OnInit(EventArgs e)
		{
			try 
			{
				InitializeComponent();
				InitializeControl();

				// Create a new Title the control
				//ModuleTitle = new DesktopModuleTitle();

				// Add title ad the very begining of 
				// the control's controls collection
				//Controls.AddAt(0, ModuleTitle);
			
				base.OnInit(e);
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}

		
		
		private void InitializeComponent() 
		{

		}
		
		
		/// <summary>
		/// Purpose: Method to initialize the control.
		/// </summary>
		private void InitializeControl() 
		{
			try 
			{
				this.Load += new System.EventHandler(this.Page_Load);

				this.lbEcommerceMerchants.SelectedIndexChanged += new EventHandler(this.lbEcommerceMerchants_SelectedIndexChanged);
				this.EcommerceMerchantsEdit.DataAction += new Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.EcommerceMerchantsEventHandler(this.EcommerceMerchantsEdit_Action);
				this.EcommerceMerchantsEdit.CancelEdit += new EventHandler(this.EcommerceMerchantsEdit_CancelEdit);
				
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the EcommerceMerchants.EditCommand event.
		/// </summary>
		protected void PopulateList() 
		{
		
			try 
			{
				this.lbEcommerceMerchants.DataSource = Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.SelectGateways();
				this.lbEcommerceMerchants.DataValueField = "MerchantID";
				this.lbEcommerceMerchants.DataTextField = "Name";
				this.lbEcommerceMerchants.DataBind();
				this.lbEcommerceMerchants.SelectedIndex = -1;
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the lbEcommerceMerchants.SelectedIndexChanged event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="eventArgs" type="EventArgs"></param>
		protected void lbEcommerceMerchants_SelectedIndexChanged(object sender, EventArgs eventArgs) 
		{
		
			try 
			{
				this.EcommerceMerchantsEdit.EcommerceMerchants.Select(Convert.ToString(this.lbEcommerceMerchants.SelectedItem.Value));
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the EcommerceMerchants.EditCommand event.
		/// </summary>
		/// <param name="sender" type="Rainbow.ECommerce.BusinessLayer.EcommerceMerchants"></param>
		/// <param name="eventArgs" type="DataChangeEventArgs"></param>
		protected void EcommerceMerchantsEdit_Action(Rainbow.ECommerce.BusinessLayer.EcommerceMerchants sender, DataChangeEventArgs eventArgs) 
		{
		
			try 
			{
				switch(eventArgs.Action) 
				{
					case Action.Insert :
					case Action.Update :
					case Action.Delete :
						this.PopulateList();
						break;
					
				}
				
				if (DataAction != null) 
				{
					DataAction(sender, eventArgs);
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the EcommerceMerchants.EditCommand event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="eventArgs" type="EventArgs"></param>
		protected void EcommerceMerchantsEdit_CancelEdit(object sender, EventArgs eventArgs) 
		{
			try 
			{
				this.PopulateList();
				
				if (CancelEdit != null) 
				{
					CancelEdit(sender, null);
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Displays any error messages.
		/// </summary>
		/// <param name="e" type="Exception">The Exception to display.</param>
		public void HandleError(Exception e) 
		{
			try 
			{
				this.lblError.Text = e.Message;
			}
			catch 
			{
				throw;
			}
		}
		
		
		#endregion
	}
}