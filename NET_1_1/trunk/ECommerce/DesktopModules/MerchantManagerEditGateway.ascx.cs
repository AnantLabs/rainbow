#region This code has been generated by KickStarter :- http://kickstarter.net
// ===============================================================================
// 
// This code has been generated by KickStarter :- http://kickstarter.net
// 
// Version :- 2.0.30.18519
// Date    :- 30/10/2003
// Time    :- 16.27
// 
// ===============================================================================
// 
// Copyright (C) 2002 - 2003 KickStarter
// 
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR
// FITNESS FOR A PARTICULAR PURPOSE.
// 
// ===============================================================================
#endregion

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Esperantus;
using Rainbow.Security;
using Rainbow.Configuration;
using Rainbow.UI;
using Rainbow.UI.WebControls;
using Rainbow.UI.DataTypes;
using Rainbow.Admin;
using Rainbow.KickStarter.CommonClasses;

namespace Rainbow.ECommerce 
{

	/// <summary>
	/// Purpose: Code Behind class for the MerchantManagerEdit control.
	/// </summary>
	public class MerchantManagerEditGateway : System.Web.UI.UserControl 
	{
	
		#region Constructors
		
		/// <summary>
		/// Purpose: Default Constructor.
		/// </summary>
		public MerchantManagerEditGateway() 
		{
		
			
		}
		
		
		#endregion
		
		#region Events
		
		/// <summary>
		/// Purpose: Notify when Record has been Selected, Inserted, Updated or Deleted.
		/// </summary>
		/// <delegate>Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.EcommerceMerchantsEventHandler</delegate>
		[field:NonSerialized()]
		public event Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.EcommerceMerchantsEventHandler DataAction;
		/// <summary>
		/// Purpose: Notify when Editing has been cancled.
		/// </summary>
		/// <delegate>EventHandler</delegate>
		[field:NonSerialized()]
		public event EventHandler CancelEdit;
		
		#endregion
		
		#region Fields
		
		private Rainbow.ECommerce.BusinessLayer.EcommerceMerchants _EcommerceMerchants = new Rainbow.ECommerce.BusinessLayer.EcommerceMerchants();
		private bool _AllowAdd = true;
		private bool _AllowUpdate = true;
		private bool _AllowDelete = true;
		protected Button btnAdd;
		protected Button btnUpdate;
		protected Button btnDelete;
		protected Button btnCancel;
		protected Label lblError;
		protected TextBox txtMerchantID;
		protected TextBox txtPortalID;
		protected TextBox txtName;
		protected TextBox txtMerchantEmail;
		protected TextBox txtTechnicalEmail;
		protected TextBox txtMetadataXml;
		protected System.Web.UI.WebControls.DropDownList cmbGateway;
		protected System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldName;
		protected RequiredFieldValidator RequiredFieldMerchantID;
		
		#endregion
		
		#region Properties
		
		/// <summary>
		/// Purpose: Property to Allow Control to add records.
		/// </summary>
		public bool AllowAdd 
		{
			set 
			{
				this._AllowAdd = value;
				if (value == false) 
				{
					this.btnAdd.Visible = false;
				}
			}
			get 
			{
				return this._AllowAdd;
			}
		}
		
		/// <summary>
		/// Purpose: Property to Allow Control to update records.
		/// </summary>
		public bool AllowUpdate 
		{
			set 
			{
				this._AllowUpdate = value;
				if (value == false) 
				{
					this.btnUpdate.Visible = false;
				}
			}
			get 
			{
				return this._AllowUpdate;
			}
		}
		
		/// <summary>
		/// Purpose: Property to Allow Control to delete records.
		/// </summary>
		public bool AllowDelete 
		{
			set 
			{
				this._AllowDelete = value;
				if (value == false) 
				{
					this.btnDelete.Visible = false;
				}
			}
			get 
			{
				return this._AllowDelete;
			}
		}
		
		/// <summary>
		/// Purpose: Property to access the EcommerceMerchants object.
		/// </summary>
		public Rainbow.ECommerce.BusinessLayer.EcommerceMerchants EcommerceMerchants 
		{
			set 
			{
				this._EcommerceMerchants = value;
			}
			get 
			{
				return this._EcommerceMerchants;
			}
		}
		
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Purpose: Method to Handle the Page.Load event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="e" type="System.EventArgs"></param>
		private void Page_Load(object sender, System.EventArgs e) 
		{
			try 
			{
				if (this.Page.IsPostBack) 
				{
					this.lblError.Text = "";
				}
				else 
				{
					this.Populate();
					this.cmbGateway.DataSource = Rainbow.ECommerce.GatewayManager.GetGateways();
					this.cmbGateway.DataValueField = "Name";
					this.cmbGateway.DataTextField = "Name";
					this.cmbGateway.DataBind();
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to override the OnInit method.
		/// </summary>
		/// <param name="e" type="System.EventArgs"></param>
		protected override void OnInit(System.EventArgs e) 
		{
			try 
			{
				InitializeComponent();
				InitializeControl();
				base.OnInit(e);
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to initialize the components in the control.
		/// </summary>
		private void InitializeComponent() 
		{

		}
		
		
		/// <summary>
		/// Purpose: Method to initialize the components in the control.
		/// </summary>
		private void InitializeControl() 
		{	
			try 
			{
				this.Load += new System.EventHandler(this.Page_Load);

				this.EcommerceMerchants.DataAction += new Rainbow.ECommerce.BusinessLayer.EcommerceMerchants.EcommerceMerchantsEventHandler(EcommerceMerchants_Action);
				
				this.btnAdd.Click += new EventHandler(this.btnAdd_Click);
				this.btnUpdate.Click += new EventHandler(this.btnUpdate_Click);
				this.btnDelete.Click += new EventHandler(this.btnDelete_Click);
				this.btnCancel.Click += new EventHandler(this.btnCancel_Click);
				
				this.btnDelete.Attributes.Add("OnClick", "return confirm('Are you sure you want to delete this record?');");
				this.btnDelete.CausesValidation = false;
				this.btnCancel.CausesValidation = false;
				
				this.btnUpdate.Visible = false;
				this.btnDelete.Visible = false;
				this.btnCancel.Visible = false;
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Resets all the controls on the control, and puts the control in Add mode.
		/// </summary>
		public void Reset() 
		{
		
			try 
			{
				if (this.AllowAdd) 
				{
					this.btnAdd.Visible = true;
				}
				this.btnUpdate.Visible = false;
				this.btnDelete.Visible = false;
				this.btnCancel.Visible = false;
				
				this.txtMerchantID.Enabled = true;
				this.EcommerceMerchants = new Rainbow.ECommerce.BusinessLayer.EcommerceMerchants();
				
				this.Populate();
				
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Populates the controls with the value of the EcommerceMerchants object.
		/// </summary>
		public void Populate() 
		{
		
			try 
			{
				this.txtMerchantID.Text = this.EcommerceMerchants.MerchantID;
				if (this.EcommerceMerchants.PortalID == int.MinValue) 
				{
					this.txtPortalID.Text = "";
				}
				else 
				{
					this.txtPortalID.Text = this.EcommerceMerchants.PortalID.ToString();
				}

				this.cmbGateway.SelectedIndex = cmbGateway.Items.IndexOf(cmbGateway.Items.FindByValue(Convert.ToString(this.EcommerceMerchants.GatewayName)));
				this.txtName.Text = this.EcommerceMerchants.Name;
				this.txtMerchantEmail.Text = this.EcommerceMerchants.MerchantEmail;
				this.txtTechnicalEmail.Text = this.EcommerceMerchants.TechnicalEmail;
				this.txtMetadataXml.Text = this.EcommerceMerchants.MetadataXml;
				ViewState["CheckSum"] = this.EcommerceMerchants.BINARY_CHECKSUM;
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Populates the EcommerceMerchants object with the value of the controls in the control.
		/// </summary>
		private void SetEcommerceMerchants() 
		{
		
			try 
			{
				this.EcommerceMerchants.MerchantID = this.txtMerchantID.Text;
				this.EcommerceMerchants.PortalID = 0;
				this.EcommerceMerchants.GatewayName = this.cmbGateway.SelectedItem.Value;
				this.EcommerceMerchants.Name = this.txtName.Text;
				this.EcommerceMerchants.MerchantEmail = this.txtMerchantEmail.Text;
				this.EcommerceMerchants.TechnicalEmail = this.txtTechnicalEmail.Text;
				this.EcommerceMerchants.MetadataXml = this.txtMetadataXml.Text;
				this.EcommerceMerchants.MerchantType = "G";
				this.EcommerceMerchants.BINARY_CHECKSUM = Convert.ToInt32(this.ViewState["CheckSum"]);
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the EcommerceMerchants events. Sets the form state depending on the event.
		/// </summary>
		/// <param name="sender" type="Rainbow.ECommerce.BusinessLayer.EcommerceMerchants"></param>
		/// <param name="eventArgs" type="DataChangeEventArgs"></param>
		private void EcommerceMerchants_Action(Rainbow.ECommerce.BusinessLayer.EcommerceMerchants sender, DataChangeEventArgs eventArgs) 
		{
		
			try 
			{
				switch(eventArgs.Action) 
				{
					case Action.Select :
						this.btnAdd.Visible = false;
						if (this.AllowUpdate) 
						{
							this.btnUpdate.Visible = true;
						}
						if (this.AllowDelete) 
						{
							this.btnDelete.Visible = true;
						}
						this.btnCancel.Visible = true;
						
						this.txtMerchantID.Enabled = false;
						this.Populate();
						
						if (DataAction != null) 
						{
							DataAction(this.EcommerceMerchants, eventArgs);
						}
						break;
					
					case Action.Insert :
					case Action.Update :
					case Action.Delete :
						this.Reset();
						if (DataAction != null) 
						{
							DataAction(this.EcommerceMerchants, eventArgs);
						}
						break;
					
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the Button btnAdd.Click event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="eventArgs" type="EventArgs"></param>
		private void btnAdd_Click(object sender, EventArgs eventArgs) 
		{
		
			try 
			{
				if (this.Page.IsValid) 
				{
					SetEcommerceMerchants();
					
					this.EcommerceMerchants.Insert();
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the Button btnUpdate.Click event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="eventArgs" type="EventArgs"></param>
		private void btnUpdate_Click(object sender, EventArgs eventArgs) 
		{
		
			try 
			{
				if (this.Page.IsValid) 
				{
					SetEcommerceMerchants();
					
					this.EcommerceMerchants.Update();
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the Button btnDelete.Click event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="eventArgs" type="EventArgs"></param>
		private void btnDelete_Click(object sender, EventArgs eventArgs) 
		{
		
			try 
			{
				SetEcommerceMerchants();
				
				this.EcommerceMerchants.Delete();
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Method to Handle the Button btnCancel.Click event.
		/// </summary>
		/// <param name="sender" type="object"></param>
		/// <param name="eventArgs" type="EventArgs"></param>
		private void btnCancel_Click(object sender, EventArgs eventArgs) 
		{
		
			try 
			{
				this.Reset();
				if (CancelEdit != null) 
				{
					CancelEdit(this.EcommerceMerchants, null);
				}
			}
			catch(Exception exception) 
			{
				this.HandleError(exception);
			}
		}
		
		
		/// <summary>
		/// Purpose: Displays any error messages.
		/// </summary>
		/// <param name="e" type="Exception">The Exception to display.</param>
		public void HandleError(Exception e) 
		{
		
			try 
			{
				this.lblError.Text = e.Message;
			}
			catch 
			{
				throw;
			}
		}
		
		
		#endregion
	}
}