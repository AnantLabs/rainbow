using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
// 
namespace Rainbow.DesktopModules.GoogleSearchWebservice.com.google.api {
	/// <remarks/>
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="GoogleSearchBinding", Namespace="urn:GoogleSearch")]
    [SoapInclude(typeof(ResultElement))]
    public class GoogleSearchService : SoapHttpClientProtocol {
        
        /// <remarks/>
        public GoogleSearchService() {
            this.Url = "http://api.google.com/search/beta2";
        }
        
        /// <remarks/>
        [SoapRpcMethod("urn:GoogleSearchAction", RequestNamespace="urn:GoogleSearch", ResponseNamespace="urn:GoogleSearch")]
        [return: SoapElement("return", DataType="base64Binary")]
        public Byte[] doGetCachedPage(string key, string url) {
            object[] results = this.Invoke("doGetCachedPage", new object[] {
                        key,
                        url});
            return ((Byte[])(results[0]));
        }
        
        /// <remarks/>
        public IAsyncResult BegindoGetCachedPage(string key, string url, AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("doGetCachedPage", new object[] {
                        key,
                        url}, callback, asyncState);
        }
        
        /// <remarks/>
        public Byte[] EnddoGetCachedPage(IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Byte[])(results[0]));
        }
        
        /// <remarks/>
        [SoapRpcMethod("urn:GoogleSearchAction", RequestNamespace="urn:GoogleSearch", ResponseNamespace="urn:GoogleSearch")]
        [return: SoapElement("return")]
        public string doSpellingSuggestion(string key, string phrase) {
            object[] results = this.Invoke("doSpellingSuggestion", new object[] {
                        key,
                        phrase});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public IAsyncResult BegindoSpellingSuggestion(string key, string phrase, AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("doSpellingSuggestion", new object[] {
                        key,
                        phrase}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EnddoSpellingSuggestion(IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [SoapRpcMethod("urn:GoogleSearchAction", RequestNamespace="urn:GoogleSearch", ResponseNamespace="urn:GoogleSearch")]
        [return: SoapElement("return")]
        public GoogleSearchResult doGoogleSearch(string key, string q, int start, int maxResults, bool filter, string restrict, bool safeSearch, string lr, string ie, string oe) {
            object[] results = this.Invoke("doGoogleSearch", new object[] {
                        key,
                        q,
                        start,
                        maxResults,
                        filter,
                        restrict,
                        safeSearch,
                        lr,
                        ie,
                        oe});
            return ((GoogleSearchResult)(results[0]));
        }
        
        /// <remarks/>
        public IAsyncResult BegindoGoogleSearch(string key, string q, int start, int maxResults, bool filter, string restrict, bool safeSearch, string lr, string ie, string oe, AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("doGoogleSearch", new object[] {
                        key,
                        q,
                        start,
                        maxResults,
                        filter,
                        restrict,
                        safeSearch,
                        lr,
                        ie,
                        oe}, callback, asyncState);
        }
        
        /// <remarks/>
        public GoogleSearchResult EnddoGoogleSearch(IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GoogleSearchResult)(results[0]));
        }
    }
    
    /// <remarks/>
    [SoapType("GoogleSearchResult", "urn:GoogleSearch")]
    public class GoogleSearchResult {
        
        /// <remarks/>
        public bool documentFiltering;
        
        /// <remarks/>
        public string searchComments;
        
        /// <remarks/>
        public int estimatedTotalResultsCount;
        
        /// <remarks/>
        public bool estimateIsExact;
        
        /// <remarks/>
        public ResultElement[] resultElements;
        
        /// <remarks/>
        public string searchQuery;
        
        /// <remarks/>
        public int startIndex;
        
        /// <remarks/>
        public int endIndex;
        
        /// <remarks/>
        public string searchTips;
        
        /// <remarks/>
        public DirectoryCategory[] directoryCategories;
        
        /// <remarks/>
        public Double searchTime;
    }
    
    /// <remarks/>
    [SoapType("ResultElement", "urn:GoogleSearch")]
    public class ResultElement {
        
        /// <remarks/>
        public string summary;
        
        /// <remarks/>
        public string URL;
        
        /// <remarks/>
        public string snippet;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string cachedSize;
        
        /// <remarks/>
        public bool relatedInformationPresent;
        
        /// <remarks/>
        public string hostName;
        
        /// <remarks/>
        public DirectoryCategory directoryCategory;
        
        /// <remarks/>
        public string directoryTitle;
    }
    
    /// <remarks/>
    [SoapType("DirectoryCategory", "urn:GoogleSearch")]
    public class DirectoryCategory {
        
        /// <remarks/>
        public string fullViewableName;
        
        /// <remarks/>
        public string specialEncoding;
    }
}
