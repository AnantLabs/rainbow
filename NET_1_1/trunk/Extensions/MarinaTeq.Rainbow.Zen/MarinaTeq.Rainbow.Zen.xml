<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MarinaTeq.Rainbow.Zen</name>
    </assembly>
    <members>
        <member name="T:Rainbow.UI.WebControls.ZenBreadCrumbs">
            <summary>
            This user control will render the breadcrumb navigation for the current tab.
            It does not render anything when the user on a first level tab.
            Ver. 1.0 - 24 dec 2002 - First release by Cory Isakson
            Ver. 1.1 - 31 jan 2003 - Update by jes - see readme
            Ver. 2.0 - 28 feb 2003 - Update by Manu - Transformed in Table Webcontrol
                                     Cleaned up the code, added support for design time
            Ver. 2.1 - 25.04.2003  - Indah Fuldner: Display breadcrumbs if the user has click a tab link  (Without hit the Database again)
            Ver. 2.2 - 20.09.2004 -  john.mandia@whitelightsolutions.com ported code to support zen style of layout. 
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenBreadCrumbs.CreateChildControls">
            <summary>
            Override CreateChildControls to create the control tree.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenBreadCrumbs.CssClass">
            <summary> 
            CssClass 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenBreadCrumbs.Separator">
            <summary>
            Separator
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenBreadCrumbs.UrlStyle">
            <summary>
            If string is tabname it appends the tabname to the end of the url
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ZenContent">
            <summary>
            ZenContent class, supports ZenLayout
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenContent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenContent.LoadControl(System.Object,System.EventArgs)">
            <summary>
            Loads control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenContent.DataBind">
            <summary>
            Binds a data source to the invoked server control and all its child controls
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenContent.InitializeDataSource">
            <summary>
            Initialize internal data source
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenContent.OnDataBinding(System.EventArgs)">
            <summary>
            This member overrides Control.OnDataBinding
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenContent.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            This member overrides Control.Render
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenContent.AutoBind">
            <summary> 
            Indicates if control should bind when it loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenContent.DataSource">
            <summary>
            The DataSource
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenContent.Content">
            <summary>
            The layout position for this content
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ZenHeaderMenu">
            <summary>
            Summary description for ZenHeaderMenu.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenHeaderMenu.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenHeaderMenu.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides Render to produce simple unordered list for Zen
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenHeaderMenu.ButtonsCssClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenHeaderMenu.LabelsCssClass">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ZenHeaderTitle">
            <summary>
            Summary description for ZenHeaderTitle.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.ZenHeaderTitle._imageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.ZenHeaderTitle._showImage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenHeaderTitle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenHeaderTitle.LoadControl(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenHeaderTitle.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides Render to produce structure suitable for Zen
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenHeaderTitle.ShowImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenHeaderTitle.ImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ZenLayout">
            <summary>
            ZenLayout is an ASP.NET WebControl which opens up a whole new way of specifying and building Rainbows pages and sites. It is the principal element used to construct
            a Design Layout for a Rainbow web site. It accepts up to five templates, only one of which (CenterColTemplate) is effectively required. Since
            the other four (HeaderTemplate, LeftColTemplate, RightColTemplate and FooterTemplate) are optional, this gives tremendous flexibility
            in page layout. A page can consist of just a CenterColTemplate, plus optionally any combination of the other templates.
            For example:<br/>
            <code>
            &lt;zen:ZenLayout&gt;
            	&lt;LeftColTemplate&gt;...&lt;/LeftColTemplate&gt;
            	&lt;CenterColTemplate&gt;...&lt;/CenterColTemplate&gt;
            &lt;/zen:ZenLayout&gt;
            </code>
            would produce a page with just two columns, with no header and no footer.<br/>
            To produce a 'classic Rainbow' page with header, three columns and footer, you would use:<br/>
            <code>
            &lt;zen:ZenLayout&gt;
            	&lt;HeaderTemplate&gt;...&lt;/HeaderTemplate&gt;
            	&lt;LeftColTemplate&gt;...&lt;/LeftColTemplate&gt;
            	&lt;CenterColTemplate&gt;...&lt;/CenterColTemplate&gt;
            	&lt;RightColTemplate&gt;...&lt;/RightColTemplate&gt;
            	&lt;FooterTemplate&gt;...&lt;/FooterTemplate&gt;
            &lt;/zen:ZenLayout&gt;
            </code>
            Each template can contain any number of Zen, Rainbow, ASP.NET or third-party WebControls or even 'fixed' HTML elements and text. 
            There are currently four new WebControls provided with Zen:
            <list type="table">
            	<item>
            		<term>ZenContent</term>
            		<description>
            		The ZenContent control is used to fill it's containing Template area with Rainbow Modules. The 'Content'
            		attribute tells Zen which PaneName to look for. For example, if the 'Content' attribute is set to 'RightPane' then the parent 
            		template will receive any modules that are marked 'RightPane' in the Rainbow configuration for the current tab. It stands to reason that
            		this ZenContent control should be enclosed within the RightColTemplate. This would be so for current 'normal' Rainbow behaviour. Nevertheless,
            		the pane names used by Zen are not hard-coded. Zen reads through the current tab configuration and simply creates a list of PaneName values
            		that it finds (with a count for each). Currently it is only ever going to find LeftPane, ContentPane and RightPane since those are the only values that Rainbow
            		can currently assign. But Zen will keep up with Rainbow's development automatically: as soon as there is a way to assign other values to PaneName (e.g. 'Header', 'Footer' or even
            		'LowerRightAdvertisingPanel') then Zen will 'detect' the new value and allow you to fill a template area with those modules by specifying: Content=&quot;LowerRightAdvertisingPanel&quot;.
            		Until that is possible, the only valid values for the 'Content' attribute are: LeftPane, ContentPane or RightPane.
            		</description>
            	</item>
            	<item>
            		<term>ZenHeaderTitle</term>
            		<description>
            		The ZenHeaderTitle control replaces both HeaderTitle and HeaderImage controls. It creates a specific HTML
            		structure:
            		<code>&lt;h1 id=&quot;portaltitle&quot; class=&quot;portaltitle&quot;&gt;Rainbow Portal&lt;span&gt;&lt;/span&gt;&lt;/h1&gt;</code>
            		This HTML is intended to be 'worked on' by a specific CSS technique called 'Levin Image Replacement'. You'll notice that
            		there is no reference to the HeaderImage in the HTML output: the image is specified in the current Theme's CSS and effectively
            		'overlays' the text, thus hiding it. See details of this elsewhere in the Zen documentation.
            		</description>
            	</item>
            	<item>
            		<term>ZenHeaderMenu</term>
            		<description>
            		The ZenHeaderMenu control inherits from the regular Rainbow.HeaderMenu and overrides its Render to produce a Zen-specific HTML
            		output:
            		<code>
            			&lt;div class=&quot;...&quot;&gt;
            				&lt;ul class=&quot;zen-hdrmenu-btns&quot;&gt;
            					&lt;li&gt;&lt;a href='...'&gt;...&lt;/a&gt;&lt;/li&gt;
            					&lt;li&gt;&lt;a href='...'&gt;...&lt;/a&gt;&lt;/li&gt;
            				&lt;/ul&gt;
            			&lt;/div&gt;
            			&lt;div class=&quot;...&quot;&gt;
            				&lt;ul class=&quot;zen-hdrmenu-labels&quot;&gt;
            					&lt;li&gt;...&lt;/li&gt;
            				&lt;/ul&gt;
            			&lt;/div&gt;
            		</code>
            		Notice that link items and plain-text items are separated so they can be treated individually by the CSS. The CSS Class
            		for each &lt;div&gt; can be set using the ButtonsCssClass and LabelsCssClass attributes of ZenHeaderMenu. Through inheritance, the 
            		normal range of Rainbow attributes can also be set (e.g. ShowLogon, ShowSaveDesktop, etc.).
            		</description>
            	</item>
            	<item>
            		<term>ZenNavigation</term>
            		<description>
            		The ZenNavigation control implements the Rainbow INavigation interface to produce horizontal or vertical menus. The actual output is a nested
            		&lt;ul&gt; (unordered list). Through the magic of CSS, this can be displayed as a drop-down or pull-out menu. This feature is still a little experimental and may change
            		in the near future: I'm experimenting with CSS techniques and may need to add more 'class' attributes within the output structure.
            		</description>
            	</item>
            </list>
            The output of the ZenLayout control is a complex hierarchy of &lt;div&gt; elements, within which will be contained any other controls specified in the Layout. The &lt;div&gt; hierarchy has a number
            of specific features:
            <list type="bullet">
            	<item>
            		<description>
            		Rather obviously it doesn't contain any &lt;table&gt; structures: the final appearance of the page is entirely
            		determined by the CSS applied to it.
            		</description>
            	</item>
            	<item>
            		<description>
            		The 'source order' of the template areas in the output HTML is: Header, CenterColumn, LeftColumn, RightColumn, Footer. This has obvious benefits
            		for Search Engine Optimization (SEO), since a spider will read the main content (assumed to be in the center column) before it encounters the left column content. It also greatly 
            		improves the 'accessibility' of the page by presenting the page contents in an order which is more logical to ScreenReaders and browsers without CSS capability or with such capability
            		disabled. Much of the apparent complexity of the structure is specifically to enable this 'trick'.
            		</description>
            	</item>
            	<item>
            		<description>
            		The HTML elements used to create the page are 'semantically meaningful' (e.g. &lt;h1&gt; for the PortaTitle, &lt;ul&gt; for navigation lists, etc) or 'semantically neutral' when their sole purpose is 
            		layout (e.g. &lt;div&gt;). This is essential for true Section 508 or Accessibility Guidelines compliance.
            		</description>
            	</item>
            	<item>
            		<description>
            		The various CSS classes which are assigned within the hierarchy are always prefixed with 'zen-' in order to ease the process of designing a site
            		with CSS alone. Each 'area' of the layout is 'marked' with a specific CSS class name which makes it easy to control the appearance of elements within that area. For example, if you
            		want the default paragraph text color in the left column to be 'red' then you'd add the CSS rule:
            		<code>.zen-col-left p { color: red }</code>
            		</description>
            	</item>
            </list>
            By combining these four controls with the ZenLayout control you have a flexible, extensible means for specifying the structure of a Rainbow page. The page's appearance is entirely controlled through the
            application of CSS rules. The page is compact, fast, Search Engine friendly and highly accessible. The only challenge is to learn a new programming language (CSS) in order to make full use of it!
            </summary>
            <remarks>
            But wait! There's more!<br/>
            A Zenlayout control may also contain, within any one of its templates, another ZenLayout control. Each ZenLayout has an identifier assigned to it, so each one is individually addressable in the Theme CSS. For example, combine the two examples given earlier:
            <code>
            &lt;zen:ZenLayout CssID=&quot;myMainLayout&quot;&gt;
            	&lt;HeaderTemplate&gt;...&lt;/HeaderTemplate&gt;
            	&lt;LeftColTemplate&gt;...&lt;/LeftColTemplate&gt;
            	&lt;CenterColTemplate&gt;
            		&lt;zen:ZenLayout CssID=&quot;mySubLayout&quot;&gt;
            			&lt;LeftColTemplate&gt;...&lt;/LeftColTemplate&gt;
            			&lt;CenterColTemplate&gt;...&lt;/CenterColTemplate&gt;
            		&lt;/zen:ZenLayout&gt;
            	&lt;/CenterColTemplate&gt;
            	&lt;RightColTemplate&gt;...&lt;/RightColTemplate&gt;
            	&lt;FooterTemplate&gt;...&lt;/FooterTemplate&gt;
            &lt;/zen:ZenLayout&gt;
            </code>
            would give you a Header, FOUR columns and a footer plus the means to control it all with CSS.
            Embed one 'classic' Rainbow layout in the center column of another, like this:
            <code>
            &lt;zen:ZenLayout&gt;
            	&lt;HeaderTemplate&gt;...&lt;/HeaderTemplate&gt;
            	&lt;LeftColTemplate&gt;...&lt;/LeftColTemplate&gt;
            	&lt;CenterColTemplate&gt;
            		&lt;zen:ZenLayout&gt;
            			&lt;HeaderTemplate&gt;...&lt;/HeaderTemplate&gt;
            			&lt;LeftColTemplate&gt;...&lt;/LeftColTemplate&gt;
            			&lt;CenterColTemplate&gt;...&lt;/CenterColTemplate&gt;
            			&lt;RightColTemplate&gt;...&lt;/RightColTemplate&gt;
            			&lt;FooterTemplate&gt;...&lt;/FooterTemplate&gt;
            			&lt;/zen:ZenLayout&gt;
            	&lt;/CenterColTemplate&gt;
            	&lt;RightColTemplate&gt;...&lt;/RightColTemplate&gt;
            	&lt;FooterTemplate&gt;...&lt;/FooterTemplate&gt;
            &lt;/zen:ZenLayout&gt;
            </code>
            and you've got a page with Header, LeftColumn, RightColumn and Footer as normal, but now the CenterColumn contains a header and footer
            of it's own plus one, two or three 'sub columns'(according to what modules are inserted).<br/>
            Of course, Rainbow's admin can't support this yet, but you could poke around in the database and achieve this today. Makes you think, doesn't it?
            </remarks>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenLayout.CreateControlHierarchy">
            <summary>
            Creates the Control Hierarchy
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenLayout.GetModuleCount">
            <summary>
            Counts the number of modules to be displayed by PaneName
            </summary>
            <remarks>
            Method does not check Cultures setting, so could be fooled into displaying
            a column even though it is empty. This needs further investigation.
            </remarks>
            <returns>HybridDictionary containing counts for all PaneNames found</returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenLayout.OnDataBinding(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenLayout.CreateChildControls">
            <summary>
            This member overrides Control.CreateChildControls
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenLayout.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            This member overrides Control.Render so we can exclude the useless outer &lt;span&gt; element that
            ASP.NET insists on adding.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.CssID">
            <summary>
            A string which will be added as the element ID of the outer DIV of this layout.
            The ID can then be used as a selector by the Theme CSS to limit the scope of a
            CSS rule to only this layout.
            </summary>
            <remarks>
            Remember that CSS is CASE SENSITIVE (contrary to popular belief!), so use the exact case
            of whatever value you set here when constructing CSS rules.<br/>
            OPTIONAL: If no value is set then no ID attribute will be added and the elements within this layout
            cannot be addressed exclusively. This is the default behaviour.
            </remarks>
            <example>
            Set CssID to 'myLayout1'. Then a CSS rule like: <br/>
            <code>#myLayout1 p{color:red}</code> <br/>
            would make 'red' the default paragraph text color within that layout.<br/>
            </example>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.HeaderContent">
            <summary>
            Tells the layout which PaneName to expect as Header content within this layout
            </summary>
            <remarks>
            There is no default value. Value is case insensitive.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.LeftContent">
            <summary>
            Tells the layout which PaneName to expect as LeftColumn content within this layout
            </summary>
            <remarks>
            Defaults to 'LeftPane' (the Duemetri.ThreePanes value for left column). Value is case insensitive.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.CenterContent">
            <summary>
            Tells the layout which PaneName to expect as CenterColumn content within this layout
            </summary>
            <remarks>
            Defaults to 'ContentPane' (the Duemetri.ThreePanes value for center column). Value is case insensitive.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.RightContent">
            <summary>
            Tells the layout which PaneName to expect as RightColumn content within this layout
            </summary>
            <remarks>
            Defaults to 'RightPane' (the Duemetri.ThreePanes value for right column). Value is case insensitive.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.FooterContent">
            <summary>
            Tells the layout which PaneName to expect as Footer content within this layout
            </summary>
            <remarks>
            There is no default value. Value is case insensitive.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ForceLeft">
            <summary>
            By default, Zen will 'hide' the left column if it is empty. Set ForceLeft to 'true' to force Zen to display an empty column.
            </summary>
            <remarks>
            Default value is 'false'.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ForceRight">
            <summary>
            By default, Zen will 'hide' the right column if it is empty. Set ForceRight to 'true' to force Zen to display an empty column.
            </summary>
            <remarks>
            Default value is 'false'.
            </remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenMain">
            <summary>
            ZenMain control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenHdr">
            <summary>
            ZenHdr control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenCols">
            <summary>
            ZenCols control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenColsWrapper">
            <summary>
            ZenColsWrapper control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenFloatWrapper">
            <summary>
            ZenFloatWrapper control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenLeftCol">
            <summary>
            ZenLeftCol control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenCenterCol">
            <summary>
            ZenCenterCol control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenRightCol">
            <summary>
            ZenRightCol control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenMiddleCol">
            <summary>
            ZenMiddleCol control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenFtr">
            <summary>
            ZenFtr control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.ZenColClear">
            <summary>
            ZenColClear control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.LeftColTemplate">
            <summary>
            Left Column Template
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.CenterColTemplate">
            <summary>
            Center Column Template
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.RightColTemplate">
            <summary>
            Right Column Template
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.HeaderTemplate">
            <summary>
            Header Template
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.FooterTemplate">
            <summary>
            Footer Template
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenLayout.Ie7Script">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ZenNavigation">
            <summary>
            Summary description for ZenNavigation.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.ZenNavigation.portalSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenNavigation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenNavigation.DataBind">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenNavigation.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenNavigation.RecursePortalTabsList(Rainbow.Configuration.TabStripDetails,System.IO.StringWriter)">
            <summary>
            
            </summary>
            <param name="myTab"></param>
            <param name="writer"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenNavigation.ContainerCssClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenNavigation.PortalTabsList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenNavigation.AutoBind">
            <summary> 
            Indicates if control should bind when loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenNavigation.Bind">
            <summary> 
            Describes how this control should bind to db data 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ZenNavigation.ParentTabID">
            <summary>
            defines the parentTabID when using BindOptionDefinedParent
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ZenTemplate">
            <summary>
            DesktopPanes design support class for Visual Studio. Pane Template.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ZenTemplate.#ctor(Rainbow.UI.WebControls.ZenLayout)">
            <summary>
            Default constructor
            </summary>
            <param name="parent"></param>
        </member>
    </members>
</doc>
