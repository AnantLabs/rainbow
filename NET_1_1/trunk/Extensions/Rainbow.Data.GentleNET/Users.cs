using System;
using System.ComponentModel;
using Rainbow.Core;

namespace Rainbow.Data.GentleNET
{
	/// <summary>
	/// Summary description for Component1.
	/// </summary>
	public class Users : UsersProvider
	{
		/// <summary>
		/// AddUser
		/// Autogenerated by CodeWizard 04/04/2003 17.55.40
		/// </summary>
		/// <param name="portalID"></param>
		/// <param name="name"></param>
		/// <param name="company"></param>
		/// <param name="address"></param>
		/// <param name="city"></param>
		/// <param name="zip"></param>
		/// <param name="countryID"></param>
		/// <param name="stateID"></param>
		/// <param name="pIva"></param>
		/// <param name="cFiscale"></param>
		/// <param name="phone"></param>
		/// <param name="fax"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="sendNewsletter"></param>
		/// <returns>The newly created ID</returns>
		public int Add(int portalID, string name, string company, string address, string city, string zip, string countryID, int stateID, string pIva, string cFiscale, string phone, string fax, string password, string email, Boolean sendNewsletter)
		{
			//TODO: Move Following line into business layer
			//if (PortalSettings.UseSingleUserBase) portalID = 0;

			rb_Users users = new rb_Users(portalID, name, company, address, city, zip, countryID, stateID, pIva, cFiscale, phone, fax, password, email, sendNewsletter);
			users.Persist();
			return users.UserID;
		}


		/// <summary>
		///*********************************************************************
		///
		/// UsersDB.AddUser() Method <a name="AddUser"></a>
		///
		/// The AddUser method inserts a new user record into the "Users" database table.
		///
		/// Other relevant sources:
		///     + <a href="AddUser.htm" style="color:green">AddUser Stored Procedure</a>
		///
		///*********************************************************************
		/// </summary>
		/// <param name="fullName" type="string">
		///     <para>
		///         
		///     </para>
		/// </param>
		/// <param name="email" type="string">
		///     <para>
		///         
		///     </para>
		/// </param>
		/// <param name="password" type="string">
		///     <para>
		///         
		///     </para>
		/// </param>
		/// <param name="portalID" type="int">
		///     <para>
		///         
		///     </para>
		/// </param>
		/// <returns>
		///     A int value...
		/// </returns>
		public int Add(String fullName, String email, String password, int portalID)
		{
			//TODO: Move Following line into business layer
			//if (PortalSettings.UseSingleUserBase) portalID = 0;

			rb_Users users = new rb_Users(portalID, fullName, password, email);
			users.Persist();
			return users.UserID;
		}


		/// <summary>
		/// The Remove method deleted a  user record from the "Users" database table.
		/// </summary>
		/// <param name="userID"></param>
		public void Remove(int userID)
		{
			rb_Users u = rb_Users.Retrieve(userID);

			if (u != null)
				u.Remove();
		}

		/// <summary>
		/// GetSingleUser Method
		///
		/// The GetSingleUser method returns a User containing details
		/// about a specific user from the Users database table.
		/// </summary>
		/// <param name="email"></param>
		/// <param name="portalID"></param>
		/// <returns></returns>
		public User GetSingleUser(String email, int portalID)
		{
			if (Active.Portal.UseSingleUserBase) portalID = 0;

//			string strSQL = @"SELECT rb_Users.*,
//				(SELECT TOP 1 rb_Localize.Description
//				FROM         rb_Cultures INNER JOIN
//					rb_Localize ON rb_Cultures.CultureCode = rb_Localize.CultureCode INNER JOIN
//                    rb_Countries ON rb_Localize.TextKey = 'COUNTRY_' + rb_Countries.CountryID
//				WHERE     ((rb_Localize.CultureCode = 'US') OR
//                    (rb_Cultures.NeutralCode = 'US')) AND (rb_Countries.CountryID = rb_Users.CountryID)) AS Country
//				FROM rb_Users LEFT OUTER JOIN
//					rb_States ON rb_Users.StateID = rb_States.StateID
//				WHERE
//					(rb_Users.Email = " + email + 
//					@") AND (rb_Users.PortalID = " + portalID + ")";

			rb_Users u = rb_Users.Retrieve(email);

			User user = new User();
			user.Id = u.UserID;
			user.PortalId = portalID;
			user.Name = u.Name;
			user.Company = u.Company;
			user.Address = u.Address;
			user.City = u.City;
			user.Zip = u.Zip;
			user.CountryId = u.CountryID;
			user.StateId = u.StateID;
			user.Phone = u.Phone;
			user.Fax = u.Fax;
			user.Password = u.Password;
			user.Email = u.Email;
			user.SendNewsletter = u.SendNewsletter;

			return user;

//			// Create Instance of Connection and Command Object
//			SqlConnection myConnection = PortalSettings.SqlConnectionString;
//			SqlCommand myCommand = new SqlCommand("rb_GetSingleUser", myConnection);
//			// Mark the Command as a SPROC
//			myCommand.CommandType = CommandType.StoredProcedure;
//			// Add Parameters to SPROC
//			SqlParameter parameterPortalID = new SqlParameter("@PortalID", SqlDbType.Int);
//			parameterPortalID.Value = portalID;
//			myCommand.Parameters.Add(parameterPortalID);
//			SqlParameter parameterEmail = new SqlParameter("@Email", SqlDbType.NVarChar, 100);
//			parameterEmail.Value = email;
//			myCommand.Parameters.Add(parameterEmail);
//			// Open the database connection and execute the command
//			myConnection.Open();
//			SqlDataReader dr = myCommand.ExecuteReader(CommandBehavior.CloseConnection);
//			// Return the datareader
//			return dr;
		}

		#region Component Model

		/// <summary>
		/// Required designer variable.
		/// </summary>
		private Container components = null;

		public Users(IContainer container)
		{
			///
			/// Required for Windows.Forms Class Composition Designer support
			///
			container.Add(this);
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		public Users()
		{
			///
			/// Required for Windows.Forms Class Composition Designer support
			///
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (components != null)
					components.Dispose();
			}
			base.Dispose(disposing);
		}

		#endregion

		#region Component Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
		}

		#endregion
	}
}